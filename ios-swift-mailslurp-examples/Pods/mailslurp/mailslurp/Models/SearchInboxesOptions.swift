//
// SearchInboxesOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class SearchInboxesOptions: NSObject, Codable, JSONEncodable {

    public enum SortDirection: String, Codable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }
    public enum InboxType: String, Codable, CaseIterable {
        case httpInbox = "HTTP_INBOX"
        case smtpInbox = "SMTP_INBOX"
    }
    public enum InboxFunction: String, Codable, CaseIterable {
        case alias = "ALIAS"
        case thread = "THREAD"
        case catchAll = "CATCH_ALL"
        case connector = "CONNECTOR"
    }
    /** Optional page index in list pagination */
    public var pageIndex: Int?
    public var pageIndexNum: NSNumber? {
        get {
            return pageIndex as NSNumber?
        }
    }
    /** Optional page size in list pagination */
    public var pageSize: Int?
    public var pageSizeNum: NSNumber? {
        get {
            return pageSize as NSNumber?
        }
    }
    /** Optional createdAt sort direction ASC or DESC */
    public var sortDirection: SortDirection?
    /** Optionally filter results for favourites only */
    public var favourite: Bool?
    public var favouriteNum: NSNumber? {
        get {
            return favourite as NSNumber?
        }
    }
    /** Optionally filter by search words partial matching ID, tags, name, and email address */
    public var search: String?
    /** Optionally filter by tags. Will return inboxes that include given tags */
    public var tag: String?
    /** Optional filter by created after given date time */
    public var since: Date?
    /** Optional filter by created before given date time */
    public var before: Date?
    /** Type of inbox. HTTP inboxes are faster and better for most cases. SMTP inboxes are more suited for public facing inbound messages (but cannot send). */
    public var inboxType: InboxType?
    /** Optional filter by inbox function */
    public var inboxFunction: InboxFunction?
    /** Optional domain ID filter */
    public var domainId: UUID?

    public init(pageIndex: Int? = nil, pageSize: Int? = nil, sortDirection: SortDirection? = nil, favourite: Bool? = nil, search: String? = nil, tag: String? = nil, since: Date? = nil, before: Date? = nil, inboxType: InboxType? = nil, inboxFunction: InboxFunction? = nil, domainId: UUID? = nil) {
        self.pageIndex = pageIndex
        self.pageSize = pageSize
        self.sortDirection = sortDirection
        self.favourite = favourite
        self.search = search
        self.tag = tag
        self.since = since
        self.before = before
        self.inboxType = inboxType
        self.inboxFunction = inboxFunction
        self.domainId = domainId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pageIndex
        case pageSize
        case sortDirection
        case favourite
        case search
        case tag
        case since
        case before
        case inboxType
        case inboxFunction
        case domainId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pageIndex, forKey: .pageIndex)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encodeIfPresent(sortDirection, forKey: .sortDirection)
        try container.encodeIfPresent(favourite, forKey: .favourite)
        try container.encodeIfPresent(search, forKey: .search)
        try container.encodeIfPresent(tag, forKey: .tag)
        try container.encodeIfPresent(since, forKey: .since)
        try container.encodeIfPresent(before, forKey: .before)
        try container.encodeIfPresent(inboxType, forKey: .inboxType)
        try container.encodeIfPresent(inboxFunction, forKey: .inboxFunction)
        try container.encodeIfPresent(domainId, forKey: .domainId)
    }
}

