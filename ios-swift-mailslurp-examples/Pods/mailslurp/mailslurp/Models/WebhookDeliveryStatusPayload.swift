//
// WebhookDeliveryStatusPayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** DELIVERY_STATUS webhook payload. Sent to your webhook url endpoint via HTTP POST when an email delivery status is created. This could be a successful delivery or a delivery failure. */
@objc public class WebhookDeliveryStatusPayload: NSObject, Codable, JSONEncodable {

    public enum EventName: String, Codable, CaseIterable {
        case emailReceived = "EMAIL_RECEIVED"
        case newEmail = "NEW_EMAIL"
        case newContact = "NEW_CONTACT"
        case newAttachment = "NEW_ATTACHMENT"
        case emailOpened = "EMAIL_OPENED"
        case emailRead = "EMAIL_READ"
        case deliveryStatus = "DELIVERY_STATUS"
        case bounce = "BOUNCE"
        case bounceRecipient = "BOUNCE_RECIPIENT"
        case newSms = "NEW_SMS"
    }
    /** Idempotent message ID. Store this ID locally or in a database to prevent message duplication. */
    public var messageId: String
    /** ID of webhook entity being triggered */
    public var webhookId: UUID
    /** Name of the event type webhook is being triggered for. */
    public var eventName: EventName
    /** Name of the webhook being triggered */
    public var webhookName: String?
    /** ID of delivery status */
    public var _id: UUID
    /** User ID of event */
    public var userId: UUID
    /** ID of sent email */
    public var sentId: UUID?
    /** IP address of the remote Mail Transfer Agent */
    public var remoteMtaIp: String?
    /** Id of the inbox */
    public var inboxId: UUID?
    /** Mail Transfer Agent reporting delivery status */
    public var reportingMta: String?
    /** Recipients for delivery */
    public var recipients: [String]?
    /** SMTP server response message */
    public var smtpResponse: String?
    /** SMTP server status */
    public var smtpStatusCode: Int?
    public var smtpStatusCodeNum: NSNumber? {
        get {
            return smtpStatusCode as NSNumber?
        }
    }
    /** Time in milliseconds for delivery processing */
    public var processingTimeMillis: Int64?
    public var processingTimeMillisNum: NSNumber? {
        get {
            return processingTimeMillis as NSNumber?
        }
    }
    /** Time event was received */
    public var received: Date?
    /** Email subject */
    public var subject: String?

    public init(messageId: String, webhookId: UUID, eventName: EventName, webhookName: String? = nil, _id: UUID, userId: UUID, sentId: UUID? = nil, remoteMtaIp: String? = nil, inboxId: UUID? = nil, reportingMta: String? = nil, recipients: [String]? = nil, smtpResponse: String? = nil, smtpStatusCode: Int? = nil, processingTimeMillis: Int64? = nil, received: Date? = nil, subject: String? = nil) {
        self.messageId = messageId
        self.webhookId = webhookId
        self.eventName = eventName
        self.webhookName = webhookName
        self._id = _id
        self.userId = userId
        self.sentId = sentId
        self.remoteMtaIp = remoteMtaIp
        self.inboxId = inboxId
        self.reportingMta = reportingMta
        self.recipients = recipients
        self.smtpResponse = smtpResponse
        self.smtpStatusCode = smtpStatusCode
        self.processingTimeMillis = processingTimeMillis
        self.received = received
        self.subject = subject
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case messageId
        case webhookId
        case eventName
        case webhookName
        case _id = "id"
        case userId
        case sentId
        case remoteMtaIp
        case inboxId
        case reportingMta
        case recipients
        case smtpResponse
        case smtpStatusCode
        case processingTimeMillis
        case received
        case subject
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(messageId, forKey: .messageId)
        try container.encode(webhookId, forKey: .webhookId)
        try container.encode(eventName, forKey: .eventName)
        try container.encodeIfPresent(webhookName, forKey: .webhookName)
        try container.encode(_id, forKey: ._id)
        try container.encode(userId, forKey: .userId)
        try container.encodeIfPresent(sentId, forKey: .sentId)
        try container.encodeIfPresent(remoteMtaIp, forKey: .remoteMtaIp)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(reportingMta, forKey: .reportingMta)
        try container.encodeIfPresent(recipients, forKey: .recipients)
        try container.encodeIfPresent(smtpResponse, forKey: .smtpResponse)
        try container.encodeIfPresent(smtpStatusCode, forKey: .smtpStatusCode)
        try container.encodeIfPresent(processingTimeMillis, forKey: .processingTimeMillis)
        try container.encodeIfPresent(received, forKey: .received)
        try container.encodeIfPresent(subject, forKey: .subject)
    }
}

