//
// PhoneNumberDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class PhoneNumberDto: NSObject, Codable, JSONEncodable {

    public enum PhoneCountry: String, Codable, CaseIterable {
        case us = "US"
        case gb = "GB"
        case au = "AU"
    }
    public var _id: UUID
    public var userId: UUID
    public var complianceAddress: UUID?
    public var emergencyAddress: UUID?
    public var phoneNumber: String
    public var phoneCountry: PhoneCountry
    public var phonePlan: UUID
    public var createdAt: Date
    public var updatedAt: Date

    public init(_id: UUID, userId: UUID, complianceAddress: UUID? = nil, emergencyAddress: UUID? = nil, phoneNumber: String, phoneCountry: PhoneCountry, phonePlan: UUID, createdAt: Date, updatedAt: Date) {
        self._id = _id
        self.userId = userId
        self.complianceAddress = complianceAddress
        self.emergencyAddress = emergencyAddress
        self.phoneNumber = phoneNumber
        self.phoneCountry = phoneCountry
        self.phonePlan = phonePlan
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case userId
        case complianceAddress
        case emergencyAddress
        case phoneNumber
        case phoneCountry
        case phonePlan
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_id, forKey: ._id)
        try container.encode(userId, forKey: .userId)
        try container.encodeIfPresent(complianceAddress, forKey: .complianceAddress)
        try container.encodeIfPresent(emergencyAddress, forKey: .emergencyAddress)
        try container.encode(phoneNumber, forKey: .phoneNumber)
        try container.encode(phoneCountry, forKey: .phoneCountry)
        try container.encode(phonePlan, forKey: .phonePlan)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

