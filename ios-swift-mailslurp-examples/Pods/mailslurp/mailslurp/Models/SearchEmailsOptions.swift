//
// SearchEmailsOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class SearchEmailsOptions: NSObject, Codable, JSONEncodable {

    public enum SortDirection: String, Codable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }
    /** Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. */
    public var inboxIds: [UUID]?
    /** Optional page index in email list pagination */
    public var pageIndex: Int?
    public var pageIndexNum: NSNumber? {
        get {
            return pageIndex as NSNumber?
        }
    }
    /** Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results */
    public var pageSize: Int?
    public var pageSizeNum: NSNumber? {
        get {
            return pageSize as NSNumber?
        }
    }
    /** Optional createdAt sort direction ASC or DESC */
    public var sortDirection: SortDirection?
    /** Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly */
    public var unreadOnly: Bool?
    public var unreadOnlyNum: NSNumber? {
        get {
            return unreadOnly as NSNumber?
        }
    }
    /** Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body */
    public var searchFilter: String?
    /** Optional filter emails received after given date time */
    public var since: Date?
    /** Optional filter emails received before given date time */
    public var before: Date?

    public init(inboxIds: [UUID]? = nil, pageIndex: Int? = nil, pageSize: Int? = nil, sortDirection: SortDirection? = nil, unreadOnly: Bool? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil) {
        self.inboxIds = inboxIds
        self.pageIndex = pageIndex
        self.pageSize = pageSize
        self.sortDirection = sortDirection
        self.unreadOnly = unreadOnly
        self.searchFilter = searchFilter
        self.since = since
        self.before = before
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case inboxIds
        case pageIndex
        case pageSize
        case sortDirection
        case unreadOnly
        case searchFilter
        case since
        case before
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(inboxIds, forKey: .inboxIds)
        try container.encodeIfPresent(pageIndex, forKey: .pageIndex)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encodeIfPresent(sortDirection, forKey: .sortDirection)
        try container.encodeIfPresent(unreadOnly, forKey: .unreadOnly)
        try container.encodeIfPresent(searchFilter, forKey: .searchFilter)
        try container.encodeIfPresent(since, forKey: .since)
        try container.encodeIfPresent(before, forKey: .before)
    }
}

