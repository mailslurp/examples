//
// MissedEmailDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Missed email */
@objc public class MissedEmailDto: NSObject, Codable, JSONEncodable {

    public var _id: UUID
    public var userId: UUID?
    public var subject: String?
    public var bodyExcerpt: String?
    public var attachmentCount: Int
    public var from: String?
    public var rawUrl: String?
    public var rawKey: String?
    public var rawBucket: String?
    public var canRestore: Bool?
    public var canRestoreNum: NSNumber? {
        get {
            return canRestore as NSNumber?
        }
    }
    public var to: [String]
    public var cc: [String]
    public var bcc: [String]
    public var inboxIds: [UUID]
    public var createdAt: Date
    public var updatedAt: Date

    public init(_id: UUID, userId: UUID? = nil, subject: String? = nil, bodyExcerpt: String? = nil, attachmentCount: Int, from: String? = nil, rawUrl: String? = nil, rawKey: String? = nil, rawBucket: String? = nil, canRestore: Bool? = nil, to: [String], cc: [String], bcc: [String], inboxIds: [UUID], createdAt: Date, updatedAt: Date) {
        self._id = _id
        self.userId = userId
        self.subject = subject
        self.bodyExcerpt = bodyExcerpt
        self.attachmentCount = attachmentCount
        self.from = from
        self.rawUrl = rawUrl
        self.rawKey = rawKey
        self.rawBucket = rawBucket
        self.canRestore = canRestore
        self.to = to
        self.cc = cc
        self.bcc = bcc
        self.inboxIds = inboxIds
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case userId
        case subject
        case bodyExcerpt
        case attachmentCount
        case from
        case rawUrl
        case rawKey
        case rawBucket
        case canRestore
        case to
        case cc
        case bcc
        case inboxIds
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_id, forKey: ._id)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(bodyExcerpt, forKey: .bodyExcerpt)
        try container.encode(attachmentCount, forKey: .attachmentCount)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(rawUrl, forKey: .rawUrl)
        try container.encodeIfPresent(rawKey, forKey: .rawKey)
        try container.encodeIfPresent(rawBucket, forKey: .rawBucket)
        try container.encodeIfPresent(canRestore, forKey: .canRestore)
        try container.encode(to, forKey: .to)
        try container.encode(cc, forKey: .cc)
        try container.encode(bcc, forKey: .bcc)
        try container.encode(inboxIds, forKey: .inboxIds)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

