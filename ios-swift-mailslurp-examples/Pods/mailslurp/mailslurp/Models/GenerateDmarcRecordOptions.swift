//
// GenerateDmarcRecordOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class GenerateDmarcRecordOptions: NSObject, Codable, JSONEncodable {

    public enum Version: String, Codable, CaseIterable {
        case dmarc1 = "DMARC1"
    }
    public enum Policy: String, Codable, CaseIterable {
        case _none = "NONE"
        case quarantine = "QUARANTINE"
        case reject = "REJECT"
    }
    public enum SubdomainPolicy: String, Codable, CaseIterable {
        case _none = "NONE"
        case quarantine = "QUARANTINE"
        case reject = "REJECT"
    }
    public enum ReportFormat: String, Codable, CaseIterable {
        case afrf = "AFRF"
    }
    public enum Adkim: String, Codable, CaseIterable {
        case strict = "STRICT"
        case relaxed = "RELAXED"
    }
    public enum Aspf: String, Codable, CaseIterable {
        case strict = "STRICT"
        case relaxed = "RELAXED"
    }
    public enum Fo: String, Codable, CaseIterable {
        case _0 = "FO_0"
        case _1 = "FO_1"
        case d = "FO_D"
        case s = "FO_S"
    }
    public var domain: String
    public var version: Version
    public var policy: Policy
    public var subdomainPolicy: SubdomainPolicy?
    public var reportEmailAddress: [String]?
    public var forensicEmailAddress: [String]?
    public var percentage: Int?
    public var percentageNum: NSNumber? {
        get {
            return percentage as NSNumber?
        }
    }
    public var reportFormat: ReportFormat?
    public var secondsBetweenReports: Int?
    public var secondsBetweenReportsNum: NSNumber? {
        get {
            return secondsBetweenReports as NSNumber?
        }
    }
    public var adkim: Adkim?
    public var aspf: Aspf?
    public var fo: Fo?

    public init(domain: String, version: Version, policy: Policy, subdomainPolicy: SubdomainPolicy? = nil, reportEmailAddress: [String]? = nil, forensicEmailAddress: [String]? = nil, percentage: Int? = nil, reportFormat: ReportFormat? = nil, secondsBetweenReports: Int? = nil, adkim: Adkim? = nil, aspf: Aspf? = nil, fo: Fo? = nil) {
        self.domain = domain
        self.version = version
        self.policy = policy
        self.subdomainPolicy = subdomainPolicy
        self.reportEmailAddress = reportEmailAddress
        self.forensicEmailAddress = forensicEmailAddress
        self.percentage = percentage
        self.reportFormat = reportFormat
        self.secondsBetweenReports = secondsBetweenReports
        self.adkim = adkim
        self.aspf = aspf
        self.fo = fo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case domain
        case version
        case policy
        case subdomainPolicy
        case reportEmailAddress
        case forensicEmailAddress
        case percentage
        case reportFormat
        case secondsBetweenReports
        case adkim
        case aspf
        case fo
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(domain, forKey: .domain)
        try container.encode(version, forKey: .version)
        try container.encode(policy, forKey: .policy)
        try container.encodeIfPresent(subdomainPolicy, forKey: .subdomainPolicy)
        try container.encodeIfPresent(reportEmailAddress, forKey: .reportEmailAddress)
        try container.encodeIfPresent(forensicEmailAddress, forKey: .forensicEmailAddress)
        try container.encodeIfPresent(percentage, forKey: .percentage)
        try container.encodeIfPresent(reportFormat, forKey: .reportFormat)
        try container.encodeIfPresent(secondsBetweenReports, forKey: .secondsBetweenReports)
        try container.encodeIfPresent(adkim, forKey: .adkim)
        try container.encodeIfPresent(aspf, forKey: .aspf)
        try container.encodeIfPresent(fo, forKey: .fo)
    }
}

