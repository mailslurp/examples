//
// CreateInboxReplierOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Options for creating an inbox replier. Repliers can be attached to inboxes and send automated responses when an inbound email matches given criteria. */
@objc public class CreateInboxReplierOptions: NSObject, Codable, JSONEncodable {

    public enum Field: String, Codable, CaseIterable {
        case recipients = "RECIPIENTS"
        case sender = "SENDER"
        case subject = "SUBJECT"
        case attachments = "ATTACHMENTS"
    }
    /** Inbox ID to attach replier to */
    public var inboxId: UUID
    /** Name for replier */
    public var name: String?
    /** Field to match against to trigger inbox replier for inbound email */
    public var field: Field
    /** String or wildcard style match for field specified when evaluating reply rules. Use `*` to match anything. */
    public var match: String
    /** Reply-to email address when sending replying */
    public var replyTo: String?
    /** Subject override when replying to email */
    public var subject: String?
    /** Send email from address */
    public var from: String?
    /** Email reply charset */
    public var charset: String?
    /** Ignore sender replyTo when responding. Send directly to the sender if enabled. */
    public var ignoreReplyTo: Bool?
    public var ignoreReplyToNum: NSNumber? {
        get {
            return ignoreReplyTo as NSNumber?
        }
    }
    /** Send HTML email */
    public var isHTML: Bool?
    public var isHTMLNum: NSNumber? {
        get {
            return isHTML as NSNumber?
        }
    }
    /** Email body for reply */
    public var body: String?
    /** ID of template to use when sending a reply */
    public var templateId: UUID?
    /** Template variable values */
    public var templateVariables: [String: AnyCodable]?

    public init(inboxId: UUID, name: String? = nil, field: Field, match: String, replyTo: String? = nil, subject: String? = nil, from: String? = nil, charset: String? = nil, ignoreReplyTo: Bool? = nil, isHTML: Bool? = nil, body: String? = nil, templateId: UUID? = nil, templateVariables: [String: AnyCodable]? = nil) {
        self.inboxId = inboxId
        self.name = name
        self.field = field
        self.match = match
        self.replyTo = replyTo
        self.subject = subject
        self.from = from
        self.charset = charset
        self.ignoreReplyTo = ignoreReplyTo
        self.isHTML = isHTML
        self.body = body
        self.templateId = templateId
        self.templateVariables = templateVariables
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case inboxId
        case name
        case field
        case match
        case replyTo
        case subject
        case from
        case charset
        case ignoreReplyTo
        case isHTML
        case body
        case templateId
        case templateVariables
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(field, forKey: .field)
        try container.encode(match, forKey: .match)
        try container.encodeIfPresent(replyTo, forKey: .replyTo)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(charset, forKey: .charset)
        try container.encodeIfPresent(ignoreReplyTo, forKey: .ignoreReplyTo)
        try container.encodeIfPresent(isHTML, forKey: .isHTML)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(templateId, forKey: .templateId)
        try container.encodeIfPresent(templateVariables, forKey: .templateVariables)
    }
}

