//
// ThreadProjection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A thread is a message thread created for a message received by an alias */
@objc public class ThreadProjection: NSObject, Codable, JSONEncodable {

    /** Created at DateTime */
    public var createdAt: Date
    /** Updated at DateTime */
    public var updatedAt: Date
    /** Inbox ID */
    public var inboxId: UUID
    /** User ID */
    public var userId: UUID
    /** To recipients */
    public var to: [String]
    /** BCC recipients */
    public var bcc: [String]?
    /** CC recipients */
    public var cc: [String]?
    /** Alias ID */
    public var aliasId: UUID
    /** Thread subject */
    public var subject: String?
    /** Name of thread */
    public var name: String?
    /** ID of email thread */
    public var _id: UUID

    public init(createdAt: Date, updatedAt: Date, inboxId: UUID, userId: UUID, to: [String], bcc: [String]? = nil, cc: [String]? = nil, aliasId: UUID, subject: String? = nil, name: String? = nil, _id: UUID) {
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.inboxId = inboxId
        self.userId = userId
        self.to = to
        self.bcc = bcc
        self.cc = cc
        self.aliasId = aliasId
        self.subject = subject
        self.name = name
        self._id = _id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt
        case updatedAt
        case inboxId
        case userId
        case to
        case bcc
        case cc
        case aliasId
        case subject
        case name
        case _id = "id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(inboxId, forKey: .inboxId)
        try container.encode(userId, forKey: .userId)
        try container.encode(to, forKey: .to)
        try container.encodeIfPresent(bcc, forKey: .bcc)
        try container.encodeIfPresent(cc, forKey: .cc)
        try container.encode(aliasId, forKey: .aliasId)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(_id, forKey: ._id)
    }
}

