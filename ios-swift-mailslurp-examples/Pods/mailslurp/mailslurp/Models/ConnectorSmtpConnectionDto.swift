//
// ConnectorSmtpConnectionDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class ConnectorSmtpConnectionDto: NSObject, Codable, JSONEncodable {

    public var connectorId: UUID
    public var smtpHost: String?
    public var smtpPort: Int?
    public var smtpPortNum: NSNumber? {
        get {
            return smtpPort as NSNumber?
        }
    }
    public var smtpUsername: String?
    public var smtpPassword: String?
    public var smtpSsl: Bool?
    public var smtpSslNum: NSNumber? {
        get {
            return smtpSsl as NSNumber?
        }
    }
    public var enabled: Bool?
    public var enabledNum: NSNumber? {
        get {
            return enabled as NSNumber?
        }
    }
    public var createdAt: Date
    public var _id: UUID

    public init(connectorId: UUID, smtpHost: String? = nil, smtpPort: Int? = nil, smtpUsername: String? = nil, smtpPassword: String? = nil, smtpSsl: Bool? = nil, enabled: Bool? = nil, createdAt: Date, _id: UUID) {
        self.connectorId = connectorId
        self.smtpHost = smtpHost
        self.smtpPort = smtpPort
        self.smtpUsername = smtpUsername
        self.smtpPassword = smtpPassword
        self.smtpSsl = smtpSsl
        self.enabled = enabled
        self.createdAt = createdAt
        self._id = _id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case connectorId
        case smtpHost
        case smtpPort
        case smtpUsername
        case smtpPassword
        case smtpSsl
        case enabled
        case createdAt
        case _id = "id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(connectorId, forKey: .connectorId)
        try container.encodeIfPresent(smtpHost, forKey: .smtpHost)
        try container.encodeIfPresent(smtpPort, forKey: .smtpPort)
        try container.encodeIfPresent(smtpUsername, forKey: .smtpUsername)
        try container.encodeIfPresent(smtpPassword, forKey: .smtpPassword)
        try container.encodeIfPresent(smtpSsl, forKey: .smtpSsl)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(_id, forKey: ._id)
    }
}

