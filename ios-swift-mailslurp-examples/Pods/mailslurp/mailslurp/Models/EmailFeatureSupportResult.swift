//
// EmailFeatureSupportResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class EmailFeatureSupportResult: NSObject, Codable, JSONEncodable {

    public enum DetectedFeatures: String, Codable, CaseIterable {
        case amp = "amp"
        case cssAccentColor = "css-accent-color"
        case cssAlignItems = "css-align-items"
        case cssAnimation = "css-animation"
        case cssAspectRatio = "css-aspect-ratio"
        case cssAtFontFace = "css-at-font-face"
        case cssAtImport = "css-at-import"
        case cssAtKeyframes = "css-at-keyframes"
        case cssAtMedia = "css-at-media"
        case cssAtSupports = "css-at-supports"
        case cssBackgroundBlendMode = "css-background-blend-mode"
        case cssBackgroundClip = "css-background-clip"
        case cssBackgroundColor = "css-background-color"
        case cssBackgroundImage = "css-background-image"
        case cssBackgroundOrigin = "css-background-origin"
        case cssBackgroundPosition = "css-background-position"
        case cssBackgroundRepeat = "css-background-repeat"
        case cssBackgroundSize = "css-background-size"
        case cssBackground = "css-background"
        case cssBlockInlineSize = "css-block-inline-size"
        case cssBorderImage = "css-border-image"
        case cssBorderInlineBlockIndividual = "css-border-inline-block-individual"
        case cssBorderInlineBlockLonghand = "css-border-inline-block-longhand"
        case cssBorderInlineBlock = "css-border-inline-block"
        case cssBorderRadiusLogical = "css-border-radius-logical"
        case cssBorderRadius = "css-border-radius"
        case cssBorder = "css-border"
        case cssBoxShadow = "css-box-shadow"
        case cssBoxSizing = "css-box-sizing"
        case cssCaptionSide = "css-caption-side"
        case cssClipPath = "css-clip-path"
        case cssColumnCount = "css-column-count"
        case cssColumnLayoutProperties = "css-column-layout-properties"
        case cssDirection = "css-direction"
        case cssDisplayFlex = "css-display-flex"
        case cssDisplayGrid = "css-display-grid"
        case cssDisplayNone = "css-display-none"
        case cssDisplay = "css-display"
        case cssFilter = "css-filter"
        case cssFlexDirection = "css-flex-direction"
        case cssFlexWrap = "css-flex-wrap"
        case cssFloat = "css-float"
        case cssFontKerning = "css-font-kerning"
        case cssFontWeight = "css-font-weight"
        case cssFont = "css-font"
        case cssGap = "css-gap"
        case cssGridTemplate = "css-grid-template"
        case cssHeight = "css-height"
        case cssHyphens = "css-hyphens"
        case cssInlineSize = "css-inline-size"
        case cssJustifyContent = "css-justify-content"
        case cssLeftRightTopBottom = "css-left-right-top-bottom"
        case cssLetterSpacing = "css-letter-spacing"
        case cssLineHeight = "css-line-height"
        case cssListStyleImage = "css-list-style-image"
        case cssListStylePosition = "css-list-style-position"
        case cssListStyleType = "css-list-style-type"
        case cssListStyle = "css-list-style"
        case cssMarginBlockStartEnd = "css-margin-block-start-end"
        case cssMarginInlineBlock = "css-margin-inline-block"
        case cssMarginInlineStartEnd = "css-margin-inline-start-end"
        case cssMarginInline = "css-margin-inline"
        case cssMargin = "css-margin"
        case cssMaxBlockSize = "css-max-block-size"
        case cssMaxHeight = "css-max-height"
        case cssMaxWidth = "css-max-width"
        case cssMinHeight = "css-min-height"
        case cssMinInlineSize = "css-min-inline-size"
        case cssMinWidth = "css-min-width"
        case cssMixBlendMode = "css-mix-blend-mode"
        case cssObjectFit = "css-object-fit"
        case cssObjectPosition = "css-object-position"
        case cssOpacity = "css-opacity"
        case cssOutlineOffset = "css-outline-offset"
        case cssOutline = "css-outline"
        case cssOverflowWrap = "css-overflow-wrap"
        case cssOverflow = "css-overflow"
        case cssPaddingBlockStartEnd = "css-padding-block-start-end"
        case cssPaddingInlineBlock = "css-padding-inline-block"
        case cssPaddingInlineStartEnd = "css-padding-inline-start-end"
        case cssPadding = "css-padding"
        case cssPosition = "css-position"
        case cssTabSize = "css-tab-size"
        case cssTableLayout = "css-table-layout"
        case cssTextAlignLast = "css-text-align-last"
        case cssTextAlign = "css-text-align"
        case cssTextDecorationColor = "css-text-decoration-color"
        case cssTextDecorationThickness = "css-text-decoration-thickness"
        case cssTextDecoration = "css-text-decoration"
        case cssTextEmphasisPosition = "css-text-emphasis-position"
        case cssTextEmphasis = "css-text-emphasis"
        case cssTextIndent = "css-text-indent"
        case cssTextOverflow = "css-text-overflow"
        case cssTextShadow = "css-text-shadow"
        case cssTextTransform = "css-text-transform"
        case cssTextUnderlineOffset = "css-text-underline-offset"
        case cssTransform = "css-transform"
        case cssVerticalAlign = "css-vertical-align"
        case cssVisibility = "css-visibility"
        case cssWhiteSpace = "css-white-space"
        case cssWidth = "css-width"
        case cssWordBreak = "css-word-break"
        case cssWritingMode = "css-writing-mode"
        case cssZIndex = "css-z-index"
        case htmlAbbr = "html-abbr"
        case htmlAddress = "html-address"
        case htmlAlign = "html-align"
        case htmlAnchorLinks = "html-anchor-links"
        case htmlAriaDescribedby = "html-aria-describedby"
        case htmlAriaHidden = "html-aria-hidden"
        case htmlAriaLabel = "html-aria-label"
        case htmlAriaLabelledby = "html-aria-labelledby"
        case htmlAriaLive = "html-aria-live"
        case htmlAudio = "html-audio"
        case htmlBackground = "html-background"
        case htmlBase = "html-base"
        case htmlBlockquote = "html-blockquote"
        case htmlBody = "html-body"
        case htmlButtonReset = "html-button-reset"
        case htmlButtonSubmit = "html-button-submit"
        case htmlCode = "html-code"
        case htmlDel = "html-del"
        case htmlDfn = "html-dfn"
        case htmlDialog = "html-dialog"
        case htmlDir = "html-dir"
        case htmlDiv = "html-div"
        case htmlDoctype = "html-doctype"
        case htmlForm = "html-form"
        case htmlH1H6 = "html-h1-h6"
        case htmlHeight = "html-height"
        case htmlImageMaps = "html-image-maps"
        case htmlInputCheckbox = "html-input-checkbox"
        case htmlInputHidden = "html-input-hidden"
        case htmlInputRadio = "html-input-radio"
        case htmlInputReset = "html-input-reset"
        case htmlInputSubmit = "html-input-submit"
        case htmlInputText = "html-input-text"
        case htmlLang = "html-lang"
        case htmlLink = "html-link"
        case htmlLists = "html-lists"
        case htmlLoadingAttribute = "html-loading-attribute"
        case htmlMailtoLinks = "html-mailto-links"
        case htmlMarquee = "html-marquee"
        case htmlMeter = "html-meter"
        case htmlObject = "html-object"
        case htmlP = "html-p"
        case htmlPicture = "html-picture"
        case htmlPre = "html-pre"
        case htmlProgress = "html-progress"
        case htmlRequired = "html-required"
        case htmlRole = "html-role"
        case htmlRp = "html-rp"
        case htmlRt = "html-rt"
        case htmlRuby = "html-ruby"
        case htmlSelect = "html-select"
        case htmlSemantics = "html-semantics"
        case htmlSmall = "html-small"
        case htmlSpan = "html-span"
        case htmlSrcset = "html-srcset"
        case htmlStrike = "html-strike"
        case htmlStrong = "html-strong"
        case htmlStyle = "html-style"
        case htmlSvg = "html-svg"
        case htmlTable = "html-table"
        case htmlTarget = "html-target"
        case htmlTextarea = "html-textarea"
        case htmlValign = "html-valign"
        case htmlVideo = "html-video"
        case htmlWbr = "html-wbr"
        case htmlWidth = "html-width"
        case imageAvif = "image-avif"
        case imageBase64 = "image-base64"
        case imageBmp = "image-bmp"
        case imageGif = "image-gif"
        case imageIco = "image-ico"
        case imageJpg = "image-jpg"
        case imagePng = "image-png"
        case imageSvg = "image-svg"
        case imageWebp = "image-webp"
        case unsupported = "unsupported"
    }
    public var names: EmailFeatureNames
    public var detectedFeatures: Set<DetectedFeatures>
    public var featureOverviews: [EmailFeatureOverview]
    public var featurePercentages: [EmailFeatureSupportStatusPercentage]

    public init(names: EmailFeatureNames, detectedFeatures: Set<DetectedFeatures>, featureOverviews: [EmailFeatureOverview], featurePercentages: [EmailFeatureSupportStatusPercentage]) {
        self.names = names
        self.detectedFeatures = detectedFeatures
        self.featureOverviews = featureOverviews
        self.featurePercentages = featurePercentages
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case names
        case detectedFeatures
        case featureOverviews
        case featurePercentages
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(names, forKey: .names)
        try container.encode(detectedFeatures, forKey: .detectedFeatures)
        try container.encode(featureOverviews, forKey: .featureOverviews)
        try container.encode(featurePercentages, forKey: .featurePercentages)
    }
}

