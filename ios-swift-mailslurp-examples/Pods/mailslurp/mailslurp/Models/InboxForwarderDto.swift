//
// InboxForwarderDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Inbox forwarder. Describes how an inbox will forward matching emails to designated recipients. */
@objc public class InboxForwarderDto: NSObject, Codable, JSONEncodable {

    public enum Field: String, Codable, CaseIterable {
        case recipients = "RECIPIENTS"
        case sender = "SENDER"
        case subject = "SUBJECT"
        case attachments = "ATTACHMENTS"
    }
    public var _id: UUID
    public var inboxId: UUID
    /** Name of inbox forwarder */
    public var name: String?
    /** Which field to match against */
    public var field: Field
    /** Wild-card type pattern to apply to field */
    public var match: String
    /** Who to send forwarded email to */
    public var forwardToRecipients: [String]
    public var createdAt: Date

    public init(_id: UUID, inboxId: UUID, name: String? = nil, field: Field, match: String, forwardToRecipients: [String], createdAt: Date) {
        self._id = _id
        self.inboxId = inboxId
        self.name = name
        self.field = field
        self.match = match
        self.forwardToRecipients = forwardToRecipients
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case inboxId
        case name
        case field
        case match
        case forwardToRecipients
        case createdAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_id, forKey: ._id)
        try container.encode(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(field, forKey: .field)
        try container.encode(match, forKey: .match)
        try container.encode(forwardToRecipients, forKey: .forwardToRecipients)
        try container.encode(createdAt, forKey: .createdAt)
    }
}

