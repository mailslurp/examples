//
// ScheduledJobDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class ScheduledJobDto: NSObject, Codable, JSONEncodable {

    public enum Status: String, Codable, CaseIterable {
        case submitted = "SUBMITTED"
        case completed = "COMPLETED"
        case aborted = "ABORTED"
        case failed = "FAILED"
        case cancelled = "CANCELLED"
    }
    public var _id: UUID
    public var userId: UUID
    public var inboxId: UUID
    public var jobId: String
    public var groupId: String
    public var triggerId: String
    public var status: Status
    public var sendAtTimestamp: Date
    public var createdAt: Date
    public var updatedAt: Date

    public init(_id: UUID, userId: UUID, inboxId: UUID, jobId: String, groupId: String, triggerId: String, status: Status, sendAtTimestamp: Date, createdAt: Date, updatedAt: Date) {
        self._id = _id
        self.userId = userId
        self.inboxId = inboxId
        self.jobId = jobId
        self.groupId = groupId
        self.triggerId = triggerId
        self.status = status
        self.sendAtTimestamp = sendAtTimestamp
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case userId
        case inboxId
        case jobId
        case groupId
        case triggerId
        case status
        case sendAtTimestamp
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_id, forKey: ._id)
        try container.encode(userId, forKey: .userId)
        try container.encode(inboxId, forKey: .inboxId)
        try container.encode(jobId, forKey: .jobId)
        try container.encode(groupId, forKey: .groupId)
        try container.encode(triggerId, forKey: .triggerId)
        try container.encode(status, forKey: .status)
        try container.encode(sendAtTimestamp, forKey: .sendAtTimestamp)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

