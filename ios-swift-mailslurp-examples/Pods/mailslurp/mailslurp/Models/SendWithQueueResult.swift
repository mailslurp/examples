//
// SendWithQueueResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class SendWithQueueResult: NSObject, Codable, JSONEncodable {

    public var _id: UUID
    public var userId: UUID
    public var subject: String?
    public var inboxId: UUID?
    public var headerId: String
    public var delivered: Bool
    public var exceptionName: String?
    public var message: String?
    public var createdAt: Date
    public var updatedAt: Date

    public init(_id: UUID, userId: UUID, subject: String? = nil, inboxId: UUID? = nil, headerId: String, delivered: Bool, exceptionName: String? = nil, message: String? = nil, createdAt: Date, updatedAt: Date) {
        self._id = _id
        self.userId = userId
        self.subject = subject
        self.inboxId = inboxId
        self.headerId = headerId
        self.delivered = delivered
        self.exceptionName = exceptionName
        self.message = message
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case userId
        case subject
        case inboxId
        case headerId
        case delivered
        case exceptionName
        case message
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_id, forKey: ._id)
        try container.encode(userId, forKey: .userId)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encode(headerId, forKey: .headerId)
        try container.encode(delivered, forKey: .delivered)
        try container.encodeIfPresent(exceptionName, forKey: .exceptionName)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

