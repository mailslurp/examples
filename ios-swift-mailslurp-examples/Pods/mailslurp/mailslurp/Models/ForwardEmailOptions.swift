//
// ForwardEmailOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Options for forwarding an email */
@objc public class ForwardEmailOptions: NSObject, Codable, JSONEncodable {

    /** To recipients for forwarded email */
    public var to: [String]
    /** Subject for forwarded email */
    public var subject: String?
    /** Optional cc recipients */
    public var cc: [String]?
    /** Optional bcc recipients */
    public var bcc: [String]?
    /** Optional from override */
    public var from: String?
    /** Optionally use inbox name as display name for sender email address */
    public var useInboxName: Bool?
    public var useInboxNameNum: NSNumber? {
        get {
            return useInboxName as NSNumber?
        }
    }
    /** Filter recipients to remove any bounced recipients from to, bcc, and cc before sending */
    public var filterBouncedRecipients: Bool?
    public var filterBouncedRecipientsNum: NSNumber? {
        get {
            return filterBouncedRecipients as NSNumber?
        }
    }

    public init(to: [String], subject: String? = nil, cc: [String]? = nil, bcc: [String]? = nil, from: String? = nil, useInboxName: Bool? = nil, filterBouncedRecipients: Bool? = nil) {
        self.to = to
        self.subject = subject
        self.cc = cc
        self.bcc = bcc
        self.from = from
        self.useInboxName = useInboxName
        self.filterBouncedRecipients = filterBouncedRecipients
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case to
        case subject
        case cc
        case bcc
        case from
        case useInboxName
        case filterBouncedRecipients
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(to, forKey: .to)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(cc, forKey: .cc)
        try container.encodeIfPresent(bcc, forKey: .bcc)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(useInboxName, forKey: .useInboxName)
        try container.encodeIfPresent(filterBouncedRecipients, forKey: .filterBouncedRecipients)
    }
}

