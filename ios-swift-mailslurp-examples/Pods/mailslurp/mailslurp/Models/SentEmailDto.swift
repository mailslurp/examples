//
// SentEmailDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Sent email details */
@objc public class SentEmailDto: NSObject, Codable, JSONEncodable {

    /** ID of sent email */
    public var _id: UUID
    /** User ID */
    public var userId: UUID
    /** Inbox ID email was sent from */
    public var inboxId: UUID
    /** Domain ID */
    public var domainId: UUID?
    /** Recipients email was sent to */
    public var to: [String]?
    /** Sent from address */
    public var from: String?
    public var replyTo: String?
    public var cc: [String]?
    public var bcc: [String]?
    /** Array of IDs of attachments that were sent with this email */
    public var attachments: [String]?
    public var subject: String?
    /** MD5 Hash */
    public var bodyMD5Hash: String?
    /** Sent email body */
    public var body: String?
    public var toContacts: [UUID]?
    public var toGroup: UUID?
    public var charset: String?
    public var isHTML: Bool?
    public var isHTMLNum: NSNumber? {
        get {
            return isHTML as NSNumber?
        }
    }
    public var sentAt: Date
    public var pixelIds: [UUID]?
    public var messageId: String?
    public var messageIds: [String]?
    public var virtualSend: Bool?
    public var virtualSendNum: NSNumber? {
        get {
            return virtualSend as NSNumber?
        }
    }
    public var templateId: UUID?
    public var templateVariables: [String: AnyCodable]?
    public var headers: [String: String]?
    public var html: Bool?
    public var htmlNum: NSNumber? {
        get {
            return html as NSNumber?
        }
    }

    public init(_id: UUID, userId: UUID, inboxId: UUID, domainId: UUID? = nil, to: [String]? = nil, from: String? = nil, replyTo: String? = nil, cc: [String]? = nil, bcc: [String]? = nil, attachments: [String]? = nil, subject: String? = nil, bodyMD5Hash: String? = nil, body: String? = nil, toContacts: [UUID]? = nil, toGroup: UUID? = nil, charset: String? = nil, isHTML: Bool? = nil, sentAt: Date, pixelIds: [UUID]? = nil, messageId: String? = nil, messageIds: [String]? = nil, virtualSend: Bool? = nil, templateId: UUID? = nil, templateVariables: [String: AnyCodable]? = nil, headers: [String: String]? = nil, html: Bool? = nil) {
        self._id = _id
        self.userId = userId
        self.inboxId = inboxId
        self.domainId = domainId
        self.to = to
        self.from = from
        self.replyTo = replyTo
        self.cc = cc
        self.bcc = bcc
        self.attachments = attachments
        self.subject = subject
        self.bodyMD5Hash = bodyMD5Hash
        self.body = body
        self.toContacts = toContacts
        self.toGroup = toGroup
        self.charset = charset
        self.isHTML = isHTML
        self.sentAt = sentAt
        self.pixelIds = pixelIds
        self.messageId = messageId
        self.messageIds = messageIds
        self.virtualSend = virtualSend
        self.templateId = templateId
        self.templateVariables = templateVariables
        self.headers = headers
        self.html = html
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case userId
        case inboxId
        case domainId
        case to
        case from
        case replyTo
        case cc
        case bcc
        case attachments
        case subject
        case bodyMD5Hash
        case body
        case toContacts
        case toGroup
        case charset
        case isHTML
        case sentAt
        case pixelIds
        case messageId
        case messageIds
        case virtualSend
        case templateId
        case templateVariables
        case headers
        case html
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_id, forKey: ._id)
        try container.encode(userId, forKey: .userId)
        try container.encode(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(domainId, forKey: .domainId)
        try container.encodeIfPresent(to, forKey: .to)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(replyTo, forKey: .replyTo)
        try container.encodeIfPresent(cc, forKey: .cc)
        try container.encodeIfPresent(bcc, forKey: .bcc)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(bodyMD5Hash, forKey: .bodyMD5Hash)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(toContacts, forKey: .toContacts)
        try container.encodeIfPresent(toGroup, forKey: .toGroup)
        try container.encodeIfPresent(charset, forKey: .charset)
        try container.encodeIfPresent(isHTML, forKey: .isHTML)
        try container.encode(sentAt, forKey: .sentAt)
        try container.encodeIfPresent(pixelIds, forKey: .pixelIds)
        try container.encodeIfPresent(messageId, forKey: .messageId)
        try container.encodeIfPresent(messageIds, forKey: .messageIds)
        try container.encodeIfPresent(virtualSend, forKey: .virtualSend)
        try container.encodeIfPresent(templateId, forKey: .templateId)
        try container.encodeIfPresent(templateVariables, forKey: .templateVariables)
        try container.encodeIfPresent(headers, forKey: .headers)
        try container.encodeIfPresent(html, forKey: .html)
    }
}

