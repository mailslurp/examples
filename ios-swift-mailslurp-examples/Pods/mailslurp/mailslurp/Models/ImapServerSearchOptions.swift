//
// ImapServerSearchOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** IMAP server search options */
@objc public class ImapServerSearchOptions: NSObject, Codable, JSONEncodable {

    public var seqNum: String?
    public var uid: String?
    public var since: Date?
    public var before: Date?
    public var sentSince: Date?
    public var sentBefore: Date?
    public var header: [String: [String]]?
    public var body: [String]?
    public var text: [String]?
    public var withFlags: [String]?
    public var withoutFlags: [String]?

    public init(seqNum: String? = nil, uid: String? = nil, since: Date? = nil, before: Date? = nil, sentSince: Date? = nil, sentBefore: Date? = nil, header: [String: [String]]? = nil, body: [String]? = nil, text: [String]? = nil, withFlags: [String]? = nil, withoutFlags: [String]? = nil) {
        self.seqNum = seqNum
        self.uid = uid
        self.since = since
        self.before = before
        self.sentSince = sentSince
        self.sentBefore = sentBefore
        self.header = header
        self.body = body
        self.text = text
        self.withFlags = withFlags
        self.withoutFlags = withoutFlags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case seqNum
        case uid
        case since
        case before
        case sentSince
        case sentBefore
        case header
        case body
        case text
        case withFlags
        case withoutFlags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(seqNum, forKey: .seqNum)
        try container.encodeIfPresent(uid, forKey: .uid)
        try container.encodeIfPresent(since, forKey: .since)
        try container.encodeIfPresent(before, forKey: .before)
        try container.encodeIfPresent(sentSince, forKey: .sentSince)
        try container.encodeIfPresent(sentBefore, forKey: .sentBefore)
        try container.encodeIfPresent(header, forKey: .header)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(withFlags, forKey: .withFlags)
        try container.encodeIfPresent(withoutFlags, forKey: .withoutFlags)
    }
}

