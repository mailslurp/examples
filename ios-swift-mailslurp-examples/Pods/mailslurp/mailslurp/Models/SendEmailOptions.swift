//
// SendEmailOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Options for the email to be sent */
@objc public class SendEmailOptions: NSObject, Codable, JSONEncodable {

    public enum SendStrategy: String, Codable, CaseIterable {
        case singleMessage = "SINGLE_MESSAGE"
    }
    public enum ValidateEmailAddresses: String, Codable, CaseIterable {
        case validateFilterRemoveInvalid = "VALIDATE_FILTER_REMOVE_INVALID"
        case validateErrorIfInvalid = "VALIDATE_ERROR_IF_INVALID"
        case noValidation = "NO_VALIDATION"
    }
    /** Optional list of contact IDs to send email to. Manage your contacts via the API or dashboard. When contacts are used the email is sent to each contact separately so they will not see other recipients. */
    public var toContacts: [UUID]?
    /** Optional contact group ID to send email to. You can create contacts and contact groups in the API or dashboard and use them for email campaigns. When contact groups are used the email is sent to each contact separately so they will not see other recipients */
    public var toGroup: UUID?
    /** List of destination email addresses. Each email address must be RFC 5322 format. Even single recipients must be in array form. Maximum recipients per email depends on your plan. If you need to send many emails try using contacts or contact groups or use a non standard sendStrategy to ensure that spam filters are not triggered (many recipients in one email can affect your spam rating). Be cautious when sending emails that your recipients exist. High bounce rates (meaning a high percentage of emails cannot be delivered because an address does not exist) can result in account freezing. */
    public var to: [String]?
    /** Optional from address. Email address is RFC 5322 format and may include a display name and email in angle brackets (`my@address.com` or `My inbox <my@address.com>`). If no sender is set the source inbox address will be used for this field. If you set `useInboxName` to `true` the from field will include the inbox name as a display name: `inbox_name <inbox@address.com>`. For this to work use the name field when creating an inbox. Beware of potential spam penalties when setting the from field to an address not used by the inbox. Your emails may get blocked by services if you impersonate another address. To use a custom email addresses use a custom domain. You can create domains with the DomainController. The domain must be verified in the dashboard before it can be used. */
    public var from: String?
    /** Optional list of cc destination email addresses */
    public var cc: [String]?
    /** Optional list of bcc destination email addresses */
    public var bcc: [String]?
    /** Optional email subject line */
    public var subject: String?
    /** Optional replyTo header */
    public var replyTo: String?
    /** Optional custom headers */
    public var customHeaders: [String: String]?
    /** Optional contents of email. If body contains HTML then set `isHTML` to true to ensure that email clients render it correctly. You can use moustache template syntax in the email body in conjunction with `toGroup` contact variables or `templateVariables` data. If you need more templating control consider creating a template and using the `template` property instead of the body. */
    public var body: String?
    /** Optional HTML flag to indicate that contents is HTML. Set's a `content-type: text/html` for email. (Deprecated: use `isHTML` instead.) */
    public var html: Bool?
    public var htmlNum: NSNumber? {
        get {
            return html as NSNumber?
        }
    }
    /** Optional HTML flag. If true the `content-type` of the email will be `text/html`. Set to true when sending HTML to ensure proper rending on email clients */
    public var isHTML: Bool?
    public var isHTMLNum: NSNumber? {
        get {
            return isHTML as NSNumber?
        }
    }
    /** Optional charset */
    public var charset: String?
    /** Optional list of attachment IDs to send with this email. You must first upload each attachment separately via method call or dashboard in order to obtain attachment IDs. This way you can reuse attachments with different emails once uploaded. There are several ways to upload that support `multi-part form`, `base64 file encoding`, and octet stream binary uploads. See the `UploadController` for available methods.  */
    public var attachments: [String]?
    /** Optional map of template variables. Will replace moustache syntax variables in subject and body or template with the associated values if found. */
    public var templateVariables: [String: AnyCodable]?
    /** Optional template ID to use for body. Will override body if provided. When using a template make sure you pass the corresponding map of `templateVariables`. You can find which variables are needed by fetching the template itself or viewing it in the dashboard. */
    public var template: UUID?
    /** How an email should be sent based on its recipients */
    public var sendStrategy: SendStrategy?
    /** Use name of inbox as sender email address name. Will construct RFC 5322 email address with `Inbox name <inbox@address.com>` if the inbox has a name. */
    public var useInboxName: Bool?
    public var useInboxNameNum: NSNumber? {
        get {
            return useInboxName as NSNumber?
        }
    }
    /** Add tracking pixel to email */
    public var addTrackingPixel: Bool?
    public var addTrackingPixelNum: NSNumber? {
        get {
            return addTrackingPixel as NSNumber?
        }
    }
    /** Filter recipients to remove any bounced recipients from to, bcc, and cc before sending */
    public var filterBouncedRecipients: Bool?
    public var filterBouncedRecipientsNum: NSNumber? {
        get {
            return filterBouncedRecipients as NSNumber?
        }
    }
    /** Validate recipient email addresses before sending */
    public var validateEmailAddresses: ValidateEmailAddresses?
    /** Ignore empty recipients after validation removes all recipients as invalid and fail silently */
    public var ignoreEmptyRecipients: Bool?
    public var ignoreEmptyRecipientsNum: NSNumber? {
        get {
            return ignoreEmptyRecipients as NSNumber?
        }
    }
    /** Is content AMP4EMAIL compatible. If set will send as x-amp-html part. */
    public var isXAmpHtml: Bool?
    public var isXAmpHtmlNum: NSNumber? {
        get {
            return isXAmpHtml as NSNumber?
        }
    }
    /** Email body content parts for multipart mime message. Will override body. */
    public var bodyParts: [SendEmailBodyPart]?

    public init(toContacts: [UUID]? = nil, toGroup: UUID? = nil, to: [String]? = nil, from: String? = nil, cc: [String]? = nil, bcc: [String]? = nil, subject: String? = nil, replyTo: String? = nil, customHeaders: [String: String]? = nil, body: String? = nil, html: Bool? = nil, isHTML: Bool? = nil, charset: String? = nil, attachments: [String]? = nil, templateVariables: [String: AnyCodable]? = nil, template: UUID? = nil, sendStrategy: SendStrategy? = nil, useInboxName: Bool? = nil, addTrackingPixel: Bool? = nil, filterBouncedRecipients: Bool? = nil, validateEmailAddresses: ValidateEmailAddresses? = nil, ignoreEmptyRecipients: Bool? = nil, isXAmpHtml: Bool? = nil, bodyParts: [SendEmailBodyPart]? = nil) {
        self.toContacts = toContacts
        self.toGroup = toGroup
        self.to = to
        self.from = from
        self.cc = cc
        self.bcc = bcc
        self.subject = subject
        self.replyTo = replyTo
        self.customHeaders = customHeaders
        self.body = body
        self.html = html
        self.isHTML = isHTML
        self.charset = charset
        self.attachments = attachments
        self.templateVariables = templateVariables
        self.template = template
        self.sendStrategy = sendStrategy
        self.useInboxName = useInboxName
        self.addTrackingPixel = addTrackingPixel
        self.filterBouncedRecipients = filterBouncedRecipients
        self.validateEmailAddresses = validateEmailAddresses
        self.ignoreEmptyRecipients = ignoreEmptyRecipients
        self.isXAmpHtml = isXAmpHtml
        self.bodyParts = bodyParts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case toContacts
        case toGroup
        case to
        case from
        case cc
        case bcc
        case subject
        case replyTo
        case customHeaders
        case body
        case html
        case isHTML
        case charset
        case attachments
        case templateVariables
        case template
        case sendStrategy
        case useInboxName
        case addTrackingPixel
        case filterBouncedRecipients
        case validateEmailAddresses
        case ignoreEmptyRecipients
        case isXAmpHtml
        case bodyParts
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(toContacts, forKey: .toContacts)
        try container.encodeIfPresent(toGroup, forKey: .toGroup)
        try container.encodeIfPresent(to, forKey: .to)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(cc, forKey: .cc)
        try container.encodeIfPresent(bcc, forKey: .bcc)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(replyTo, forKey: .replyTo)
        try container.encodeIfPresent(customHeaders, forKey: .customHeaders)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(html, forKey: .html)
        try container.encodeIfPresent(isHTML, forKey: .isHTML)
        try container.encodeIfPresent(charset, forKey: .charset)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(templateVariables, forKey: .templateVariables)
        try container.encodeIfPresent(template, forKey: .template)
        try container.encodeIfPresent(sendStrategy, forKey: .sendStrategy)
        try container.encodeIfPresent(useInboxName, forKey: .useInboxName)
        try container.encodeIfPresent(addTrackingPixel, forKey: .addTrackingPixel)
        try container.encodeIfPresent(filterBouncedRecipients, forKey: .filterBouncedRecipients)
        try container.encodeIfPresent(validateEmailAddresses, forKey: .validateEmailAddresses)
        try container.encodeIfPresent(ignoreEmptyRecipients, forKey: .ignoreEmptyRecipients)
        try container.encodeIfPresent(isXAmpHtml, forKey: .isXAmpHtml)
        try container.encodeIfPresent(bodyParts, forKey: .bodyParts)
    }
}

