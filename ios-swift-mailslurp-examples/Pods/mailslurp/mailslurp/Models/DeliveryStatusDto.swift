//
// DeliveryStatusDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class DeliveryStatusDto: NSObject, Codable, JSONEncodable {

    public var _id: UUID
    public var userId: UUID
    public var sentId: UUID?
    public var remoteMtaIp: String?
    public var inboxId: UUID?
    public var reportingMta: String?
    public var recipients: [String]?
    public var smtpResponse: String?
    public var smtpStatusCode: Int?
    public var smtpStatusCodeNum: NSNumber? {
        get {
            return smtpStatusCode as NSNumber?
        }
    }
    public var processingTimeMillis: Int64?
    public var processingTimeMillisNum: NSNumber? {
        get {
            return processingTimeMillis as NSNumber?
        }
    }
    public var received: Date?
    public var subject: String?
    public var createdAt: Date
    public var updatedAt: Date

    public init(_id: UUID, userId: UUID, sentId: UUID? = nil, remoteMtaIp: String? = nil, inboxId: UUID? = nil, reportingMta: String? = nil, recipients: [String]? = nil, smtpResponse: String? = nil, smtpStatusCode: Int? = nil, processingTimeMillis: Int64? = nil, received: Date? = nil, subject: String? = nil, createdAt: Date, updatedAt: Date) {
        self._id = _id
        self.userId = userId
        self.sentId = sentId
        self.remoteMtaIp = remoteMtaIp
        self.inboxId = inboxId
        self.reportingMta = reportingMta
        self.recipients = recipients
        self.smtpResponse = smtpResponse
        self.smtpStatusCode = smtpStatusCode
        self.processingTimeMillis = processingTimeMillis
        self.received = received
        self.subject = subject
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case userId
        case sentId
        case remoteMtaIp
        case inboxId
        case reportingMta
        case recipients
        case smtpResponse
        case smtpStatusCode
        case processingTimeMillis
        case received
        case subject
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_id, forKey: ._id)
        try container.encode(userId, forKey: .userId)
        try container.encodeIfPresent(sentId, forKey: .sentId)
        try container.encodeIfPresent(remoteMtaIp, forKey: .remoteMtaIp)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(reportingMta, forKey: .reportingMta)
        try container.encodeIfPresent(recipients, forKey: .recipients)
        try container.encodeIfPresent(smtpResponse, forKey: .smtpResponse)
        try container.encodeIfPresent(smtpStatusCode, forKey: .smtpStatusCode)
        try container.encodeIfPresent(processingTimeMillis, forKey: .processingTimeMillis)
        try container.encodeIfPresent(received, forKey: .received)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

