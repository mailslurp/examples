//
// ConnectorImapConnectionDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class ConnectorImapConnectionDto: NSObject, Codable, JSONEncodable {

    public var connectorId: UUID
    public var imapHost: String?
    public var imapPort: Int?
    public var imapPortNum: NSNumber? {
        get {
            return imapPort as NSNumber?
        }
    }
    public var imapUsername: String?
    public var imapPassword: String?
    public var imapSsl: Bool?
    public var imapSslNum: NSNumber? {
        get {
            return imapSsl as NSNumber?
        }
    }
    public var selectFolder: String?
    public var searchTerms: String?
    public var enabled: Bool?
    public var enabledNum: NSNumber? {
        get {
            return enabled as NSNumber?
        }
    }
    public var createdAt: Date
    public var _id: UUID

    public init(connectorId: UUID, imapHost: String? = nil, imapPort: Int? = nil, imapUsername: String? = nil, imapPassword: String? = nil, imapSsl: Bool? = nil, selectFolder: String? = nil, searchTerms: String? = nil, enabled: Bool? = nil, createdAt: Date, _id: UUID) {
        self.connectorId = connectorId
        self.imapHost = imapHost
        self.imapPort = imapPort
        self.imapUsername = imapUsername
        self.imapPassword = imapPassword
        self.imapSsl = imapSsl
        self.selectFolder = selectFolder
        self.searchTerms = searchTerms
        self.enabled = enabled
        self.createdAt = createdAt
        self._id = _id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case connectorId
        case imapHost
        case imapPort
        case imapUsername
        case imapPassword
        case imapSsl
        case selectFolder
        case searchTerms
        case enabled
        case createdAt
        case _id = "id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(connectorId, forKey: .connectorId)
        try container.encodeIfPresent(imapHost, forKey: .imapHost)
        try container.encodeIfPresent(imapPort, forKey: .imapPort)
        try container.encodeIfPresent(imapUsername, forKey: .imapUsername)
        try container.encodeIfPresent(imapPassword, forKey: .imapPassword)
        try container.encodeIfPresent(imapSsl, forKey: .imapSsl)
        try container.encodeIfPresent(selectFolder, forKey: .selectFolder)
        try container.encodeIfPresent(searchTerms, forKey: .searchTerms)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(_id, forKey: ._id)
    }
}

