//
// InboxRulesetDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Rules for inbox */
@objc public class InboxRulesetDto: NSObject, Codable, JSONEncodable {

    public enum Scope: String, Codable, CaseIterable {
        case receivingEmails = "RECEIVING_EMAILS"
        case sendingEmails = "SENDING_EMAILS"
    }
    public enum Action: String, Codable, CaseIterable {
        case block = "BLOCK"
        case allow = "ALLOW"
        case filterRemove = "FILTER_REMOVE"
    }
    public enum Handler: String, Codable, CaseIterable {
        case exception = "EXCEPTION"
    }
    public var _id: UUID
    public var inboxId: UUID?
    public var scope: Scope
    public var action: Action
    public var target: String
    public var handler: Handler
    public var createdAt: Date

    public init(_id: UUID, inboxId: UUID? = nil, scope: Scope, action: Action, target: String, handler: Handler, createdAt: Date) {
        self._id = _id
        self.inboxId = inboxId
        self.scope = scope
        self.action = action
        self.target = target
        self.handler = handler
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case inboxId
        case scope
        case action
        case target
        case handler
        case createdAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_id, forKey: ._id)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encode(scope, forKey: .scope)
        try container.encode(action, forKey: .action)
        try container.encode(target, forKey: .target)
        try container.encode(handler, forKey: .handler)
        try container.encode(createdAt, forKey: .createdAt)
    }
}

