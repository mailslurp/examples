//
// ImapControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class ImapControllerAPI : NSObject {

    /**
     Fetch message in an inbox
     
     - parameter seqNum: (query)  
     - parameter inboxId: (query) Inbox ID to search (optional)
     - returns: Promise<ImapServerFetchResult>
     */
    open class func imapServerFetch( seqNum: Int64,  inboxId: UUID? = nil) -> Promise<ImapServerFetchResult> {
        let deferred = Promise<ImapServerFetchResult>.pending()
        imapServerFetchWithRequestBuilder(seqNum: seqNum, inboxId: inboxId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Fetch message in an inbox
     - POST /imap/server/fetch
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter seqNum: (query)  
     - parameter inboxId: (query) Inbox ID to search (optional)
     - returns: RequestBuilder<ImapServerFetchResult> 
     */
    open class func imapServerFetchWithRequestBuilder(seqNum: Int64, inboxId: UUID? = nil) -> RequestBuilder<ImapServerFetchResult> {
        let localVariablePath = "/imap/server/fetch"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
            "seqNum": (wrappedValue: seqNum.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImapServerFetchResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a message by email ID
     
     - parameter emailId: (query) Email ID to get 
     - parameter inboxId: (query) Inbox ID to search (optional)
     - returns: Promise<ImapServerGetResult>
     */
    open class func imapServerGet( emailId: UUID,  inboxId: UUID? = nil) -> Promise<ImapServerGetResult> {
        let deferred = Promise<ImapServerGetResult>.pending()
        imapServerGetWithRequestBuilder(emailId: emailId, inboxId: inboxId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a message by email ID
     - POST /imap/server/get
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter emailId: (query) Email ID to get 
     - parameter inboxId: (query) Inbox ID to search (optional)
     - returns: RequestBuilder<ImapServerGetResult> 
     */
    open class func imapServerGetWithRequestBuilder(emailId: UUID, inboxId: UUID? = nil) -> RequestBuilder<ImapServerGetResult> {
        let localVariablePath = "/imap/server/get"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "emailId": (wrappedValue: emailId.encodeToJSON(), isExplode: true),
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImapServerGetResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List messages in an inbox
     
     - parameter imapServerListOptions: (body)  
     - parameter inboxId: (query) Inbox ID to list (optional)
     - returns: Promise<ImapServerListResult>
     */
    open class func imapServerList( imapServerListOptions: ImapServerListOptions,  inboxId: UUID? = nil) -> Promise<ImapServerListResult> {
        let deferred = Promise<ImapServerListResult>.pending()
        imapServerListWithRequestBuilder(imapServerListOptions: imapServerListOptions, inboxId: inboxId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List messages in an inbox
     - POST /imap/server/list
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter imapServerListOptions: (body)  
     - parameter inboxId: (query) Inbox ID to list (optional)
     - returns: RequestBuilder<ImapServerListResult> 
     */
    open class func imapServerListWithRequestBuilder(imapServerListOptions: ImapServerListOptions, inboxId: UUID? = nil) -> RequestBuilder<ImapServerListResult> {
        let localVariablePath = "/imap/server/list"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: imapServerListOptions)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImapServerListResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a new mailbox if possible
     
     - parameter name: (query) Inbox email address to create 
     - returns: Promise<ImapServerMailboxResult>
     */
    open class func imapServerMailbox( name: String) -> Promise<ImapServerMailboxResult> {
        let deferred = Promise<ImapServerMailboxResult>.pending()
        imapServerMailboxWithRequestBuilder(name: name).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a new mailbox if possible
     - POST /imap/server/mailbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter name: (query) Inbox email address to create 
     - returns: RequestBuilder<ImapServerMailboxResult> 
     */
    open class func imapServerMailboxWithRequestBuilder(name: String) -> RequestBuilder<ImapServerMailboxResult> {
        let localVariablePath = "/imap/server/mailbox"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImapServerMailboxResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search messages in an inbox
     
     - parameter imapServerSearchOptions: (body)  
     - parameter inboxId: (query) Inbox ID to search (optional)
     - returns: Promise<ImapServerSearchResult>
     */
    open class func imapServerSearch( imapServerSearchOptions: ImapServerSearchOptions,  inboxId: UUID? = nil) -> Promise<ImapServerSearchResult> {
        let deferred = Promise<ImapServerSearchResult>.pending()
        imapServerSearchWithRequestBuilder(imapServerSearchOptions: imapServerSearchOptions, inboxId: inboxId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Search messages in an inbox
     - POST /imap/server/search
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter imapServerSearchOptions: (body)  
     - parameter inboxId: (query) Inbox ID to search (optional)
     - returns: RequestBuilder<ImapServerSearchResult> 
     */
    open class func imapServerSearchWithRequestBuilder(imapServerSearchOptions: ImapServerSearchOptions, inboxId: UUID? = nil) -> RequestBuilder<ImapServerSearchResult> {
        let localVariablePath = "/imap/server/search"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: imapServerSearchOptions)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImapServerSearchResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get status for mailbox
     
     - parameter imapServerStatusOptions: (body)  
     - parameter inboxId: (query) Inbox ID to list (optional)
     - returns: Promise<ImapServerStatusResult>
     */
    open class func imapServerStatus( imapServerStatusOptions: ImapServerStatusOptions,  inboxId: UUID? = nil) -> Promise<ImapServerStatusResult> {
        let deferred = Promise<ImapServerStatusResult>.pending()
        imapServerStatusWithRequestBuilder(imapServerStatusOptions: imapServerStatusOptions, inboxId: inboxId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get status for mailbox
     - POST /imap/server/status
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter imapServerStatusOptions: (body)  
     - parameter inboxId: (query) Inbox ID to list (optional)
     - returns: RequestBuilder<ImapServerStatusResult> 
     */
    open class func imapServerStatusWithRequestBuilder(imapServerStatusOptions: ImapServerStatusOptions, inboxId: UUID? = nil) -> RequestBuilder<ImapServerStatusResult> {
        let localVariablePath = "/imap/server/status"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: imapServerStatusOptions)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImapServerStatusResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter imapUpdateFlagsOptions: (body)  
     - parameter inboxId: (query)  (optional)
     - returns: Promise<Void>
     */
    open class func imapServerUpdateFlags( imapUpdateFlagsOptions: ImapUpdateFlagsOptions,  inboxId: UUID? = nil) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        imapServerUpdateFlagsWithRequestBuilder(imapUpdateFlagsOptions: imapUpdateFlagsOptions, inboxId: inboxId).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /imap/server/update-flags
     - Update message flags
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter imapUpdateFlagsOptions: (body)  
     - parameter inboxId: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func imapServerUpdateFlagsWithRequestBuilder(imapUpdateFlagsOptions: ImapUpdateFlagsOptions, inboxId: UUID? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/imap/server/update-flags"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: imapUpdateFlagsOptions)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
