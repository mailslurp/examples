//
// ExpiredControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class ExpiredControllerAPI : NSObject {

    /**
     Get default expiration settings
     
     - returns: Promise<ExpirationDefaults>
     */
    open class func getExpirationDefaults() -> Promise<ExpirationDefaults> {
        let deferred = Promise<ExpirationDefaults>.pending()
        getExpirationDefaultsWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get default expiration settings
     - GET /expired/defaults
     - Return default times used for inbox expiration
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<ExpirationDefaults> 
     */
    open class func getExpirationDefaultsWithRequestBuilder() -> RequestBuilder<ExpirationDefaults> {
        let localVariablePath = "/expired/defaults"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExpirationDefaults>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get expired inbox record for a previously existing inbox
     
     - parameter inboxId: (path) ID of inbox you want to retrieve (not the inbox ID) 
     - returns: Promise<ExpiredInboxDto>
     */
    open class func getExpiredInboxByInboxId( inboxId: UUID) -> Promise<ExpiredInboxDto> {
        let deferred = Promise<ExpiredInboxDto>.pending()
        getExpiredInboxByInboxIdWithRequestBuilder(inboxId: inboxId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get expired inbox record for a previously existing inbox
     - GET /expired/inbox/{inboxId}
     - Use the inboxId to return an ExpiredInboxRecord if an inbox has expired. Inboxes expire and are disabled if an expiration date is set or plan requires. Returns 404 if no expired inbox is found for the inboxId
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) ID of inbox you want to retrieve (not the inbox ID) 
     - returns: RequestBuilder<ExpiredInboxDto> 
     */
    open class func getExpiredInboxByInboxIdWithRequestBuilder(inboxId: UUID) -> RequestBuilder<ExpiredInboxDto> {
        var localVariablePath = "/expired/inbox/{inboxId}"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExpiredInboxDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get an expired inbox record
     
     - parameter expiredId: (path) ID of the ExpiredInboxRecord you want to retrieve. This is different from the ID of the inbox you are interested in. See other methods for getting ExpiredInboxRecord for an inbox inboxId 
     - returns: Promise<ExpiredInboxDto>
     */
    open class func getExpiredInboxRecord( expiredId: UUID) -> Promise<ExpiredInboxDto> {
        let deferred = Promise<ExpiredInboxDto>.pending()
        getExpiredInboxRecordWithRequestBuilder(expiredId: expiredId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an expired inbox record
     - GET /expired/{expiredId}
     - Inboxes created with an expiration date will expire after the given date and be moved to an ExpiredInbox entity. You can still read emails in the inbox but it can no longer send or receive emails. Fetch the expired inboxes to view the old inboxes properties
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter expiredId: (path) ID of the ExpiredInboxRecord you want to retrieve. This is different from the ID of the inbox you are interested in. See other methods for getting ExpiredInboxRecord for an inbox inboxId 
     - returns: RequestBuilder<ExpiredInboxDto> 
     */
    open class func getExpiredInboxRecordWithRequestBuilder(expiredId: UUID) -> RequestBuilder<ExpiredInboxDto> {
        var localVariablePath = "/expired/{expiredId}"
        let expiredIdPreEscape = "\(APIHelper.mapValueToPathItem(expiredId))"
        let expiredIdPostEscape = expiredIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{expiredId}", with: expiredIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExpiredInboxDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getExpiredInboxes: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List records of expired inboxes
     
     - parameter page: (query) Optional page index in inbox sent email list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox sent email list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: Promise<PageExpiredInboxRecordProjection>
     */
    open class func getExpiredInboxes( page: Int? = nil,  size: Int? = nil,  sort: Sort_getExpiredInboxes? = nil,  since: Date? = nil,  before: Date? = nil) -> Promise<PageExpiredInboxRecordProjection> {
        let deferred = Promise<PageExpiredInboxRecordProjection>.pending()
        getExpiredInboxesWithRequestBuilder(page: page, size: size, sort: sort, since: since, before: before).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List records of expired inboxes
     - GET /expired
     - Inboxes created with an expiration date will expire after the given date. An ExpiredInboxRecord is created that records the inboxes old ID and email address. You can still read emails in the inbox (using the inboxes old ID) but the email address associated with the inbox can no longer send or receive emails. Fetch expired inbox records to view the old inboxes properties
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter page: (query) Optional page index in inbox sent email list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox sent email list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageExpiredInboxRecordProjection> 
     */
    open class func getExpiredInboxesWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getExpiredInboxes? = nil, since: Date? = nil, before: Date? = nil) -> RequestBuilder<PageExpiredInboxRecordProjection> {
        let localVariablePath = "/expired"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageExpiredInboxRecordProjection>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
