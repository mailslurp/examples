//
// InboxReplierControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class InboxReplierControllerAPI : NSObject {

    /**
     Create an inbox replier
     
     - parameter createInboxReplierOptions: (body)  
     - returns: Promise<InboxReplierDto>
     */
    open class func createNewInboxReplier( createInboxReplierOptions: CreateInboxReplierOptions) -> Promise<InboxReplierDto> {
        let deferred = Promise<InboxReplierDto>.pending()
        createNewInboxReplierWithRequestBuilder(createInboxReplierOptions: createInboxReplierOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create an inbox replier
     - POST /repliers
     - Create a new inbox rule for reply toing, blocking, and allowing emails when sending and receiving
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter createInboxReplierOptions: (body)  
     - returns: RequestBuilder<InboxReplierDto> 
     */
    open class func createNewInboxReplierWithRequestBuilder(createInboxReplierOptions: CreateInboxReplierOptions) -> RequestBuilder<InboxReplierDto> {
        let localVariablePath = "/repliers"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createInboxReplierOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxReplierDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an inbox replier
     
     - parameter _id: (path) ID of inbox replier 
     - returns: Promise<Void>
     */
    open class func deleteInboxReplier( _id: UUID) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteInboxReplierWithRequestBuilder(_id: _id).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete an inbox replier
     - DELETE /repliers/{id}
     - Delete inbox replier
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox replier 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteInboxReplierWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/repliers/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete inbox repliers
     
     - parameter inboxId: (query) Optional inbox id to attach replier to (optional)
     - returns: Promise<Void>
     */
    open class func deleteInboxRepliers( inboxId: UUID? = nil) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteInboxRepliersWithRequestBuilder(inboxId: inboxId).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete inbox repliers
     - DELETE /repliers
     - Delete inbox repliers. Accepts optional inboxId filter.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox id to attach replier to (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteInboxRepliersWithRequestBuilder(inboxId: UUID? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/repliers"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get an inbox replier
     
     - parameter _id: (path) ID of inbox replier 
     - returns: Promise<InboxReplierDto>
     */
    open class func getInboxReplier( _id: UUID) -> Promise<InboxReplierDto> {
        let deferred = Promise<InboxReplierDto>.pending()
        getInboxReplierWithRequestBuilder(_id: _id).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an inbox replier
     - GET /repliers/{id}
     - Get inbox ruleset
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox replier 
     - returns: RequestBuilder<InboxReplierDto> 
     */
    open class func getInboxReplierWithRequestBuilder(_id: UUID) -> RequestBuilder<InboxReplierDto> {
        var localVariablePath = "/repliers/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxReplierDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getInboxReplierEvents: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get an inbox replier event list
     
     - parameter _id: (path) ID of inbox replier 
     - parameter page: (query) Optional page index in inbox replier event list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox replier event list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: Promise<PageInboxReplierEvents>
     */
    open class func getInboxReplierEvents( _id: UUID,  page: Int? = nil,  size: Int? = nil,  sort: Sort_getInboxReplierEvents? = nil) -> Promise<PageInboxReplierEvents> {
        let deferred = Promise<PageInboxReplierEvents>.pending()
        getInboxReplierEventsWithRequestBuilder(_id: _id, page: page, size: size, sort: sort).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an inbox replier event list
     - GET /repliers/{id}/events
     - Get inbox ruleset events
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox replier 
     - parameter page: (query) Optional page index in inbox replier event list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox replier event list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageInboxReplierEvents> 
     */
    open class func getInboxReplierEventsWithRequestBuilder(_id: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getInboxReplierEvents? = nil) -> RequestBuilder<PageInboxReplierEvents> {
        var localVariablePath = "/repliers/{id}/events"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageInboxReplierEvents>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getInboxRepliers: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List inbox repliers
     
     - parameter inboxId: (query) Optional inbox id to get repliers from (optional)
     - parameter page: (query) Optional page index in inbox replier list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox replier list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: Promise<PageInboxReplierDto>
     */
    open class func getInboxRepliers( inboxId: UUID? = nil,  page: Int? = nil,  size: Int? = nil,  sort: Sort_getInboxRepliers? = nil,  since: Date? = nil,  before: Date? = nil) -> Promise<PageInboxReplierDto> {
        let deferred = Promise<PageInboxReplierDto>.pending()
        getInboxRepliersWithRequestBuilder(inboxId: inboxId, page: page, size: size, sort: sort, since: since, before: before).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List inbox repliers
     - GET /repliers
     - List all repliers attached to an inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox id to get repliers from (optional)
     - parameter page: (query) Optional page index in inbox replier list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox replier list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageInboxReplierDto> 
     */
    open class func getInboxRepliersWithRequestBuilder(inboxId: UUID? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getInboxRepliers? = nil, since: Date? = nil, before: Date? = nil) -> RequestBuilder<PageInboxReplierDto> {
        let localVariablePath = "/repliers"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageInboxReplierDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update an inbox replier
     
     - parameter _id: (path) ID of inbox replier 
     - parameter updateInboxReplierOptions: (body)  
     - returns: Promise<InboxReplierDto>
     */
    open class func updateInboxReplier( _id: UUID,  updateInboxReplierOptions: UpdateInboxReplierOptions) -> Promise<InboxReplierDto> {
        let deferred = Promise<InboxReplierDto>.pending()
        updateInboxReplierWithRequestBuilder(_id: _id, updateInboxReplierOptions: updateInboxReplierOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Update an inbox replier
     - PUT /repliers/{id}
     - Update inbox ruleset
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox replier 
     - parameter updateInboxReplierOptions: (body)  
     - returns: RequestBuilder<InboxReplierDto> 
     */
    open class func updateInboxReplierWithRequestBuilder(_id: UUID, updateInboxReplierOptions: UpdateInboxReplierOptions) -> RequestBuilder<InboxReplierDto> {
        var localVariablePath = "/repliers/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateInboxReplierOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxReplierDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
