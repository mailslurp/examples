//
// ConnectorControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class ConnectorControllerAPI : NSObject {

    /**
     Create an inbox connector
     
     - parameter createConnectorOptions: (body)  
     - returns: Promise<ConnectorDto>
     */
    open class func createConnector( createConnectorOptions: CreateConnectorOptions) -> Promise<ConnectorDto> {
        let deferred = Promise<ConnectorDto>.pending()
        createConnectorWithRequestBuilder(createConnectorOptions: createConnectorOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create an inbox connector
     - POST /connectors
     - Sync emails between external mailboxes and MailSlurp inboxes
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter createConnectorOptions: (body)  
     - returns: RequestBuilder<ConnectorDto> 
     */
    open class func createConnectorWithRequestBuilder(createConnectorOptions: CreateConnectorOptions) -> RequestBuilder<ConnectorDto> {
        let localVariablePath = "/connectors"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createConnectorOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectorDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create an inbox connector IMAP connection
     
     - parameter _id: (path)  
     - parameter createConnectorImapConnectionOptions: (body)  
     - returns: Promise<ConnectorImapConnectionDto>
     */
    open class func createConnectorImapConnection( _id: UUID,  createConnectorImapConnectionOptions: CreateConnectorImapConnectionOptions) -> Promise<ConnectorImapConnectionDto> {
        let deferred = Promise<ConnectorImapConnectionDto>.pending()
        createConnectorImapConnectionWithRequestBuilder(_id: _id, createConnectorImapConnectionOptions: createConnectorImapConnectionOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create an inbox connector IMAP connection
     - POST /connectors/{id}/imap
     - Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path)  
     - parameter createConnectorImapConnectionOptions: (body)  
     - returns: RequestBuilder<ConnectorImapConnectionDto> 
     */
    open class func createConnectorImapConnectionWithRequestBuilder(_id: UUID, createConnectorImapConnectionOptions: CreateConnectorImapConnectionOptions) -> RequestBuilder<ConnectorImapConnectionDto> {
        var localVariablePath = "/connectors/{id}/imap"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createConnectorImapConnectionOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectorImapConnectionDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create an inbox connector SMTP connection
     
     - parameter _id: (path)  
     - parameter createConnectorSmtpConnectionOptions: (body)  
     - returns: Promise<ConnectorSmtpConnectionDto>
     */
    open class func createConnectorSmtpConnection( _id: UUID,  createConnectorSmtpConnectionOptions: CreateConnectorSmtpConnectionOptions) -> Promise<ConnectorSmtpConnectionDto> {
        let deferred = Promise<ConnectorSmtpConnectionDto>.pending()
        createConnectorSmtpConnectionWithRequestBuilder(_id: _id, createConnectorSmtpConnectionOptions: createConnectorSmtpConnectionOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create an inbox connector SMTP connection
     - POST /connectors/{id}/smtp
     - Allows sending via connector and email is routed to connected inbox and sent via SMTP
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path)  
     - parameter createConnectorSmtpConnectionOptions: (body)  
     - returns: RequestBuilder<ConnectorSmtpConnectionDto> 
     */
    open class func createConnectorSmtpConnectionWithRequestBuilder(_id: UUID, createConnectorSmtpConnectionOptions: CreateConnectorSmtpConnectionOptions) -> RequestBuilder<ConnectorSmtpConnectionDto> {
        var localVariablePath = "/connectors/{id}/smtp"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createConnectorSmtpConnectionOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectorSmtpConnectionDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete all inbox connectors
     
     - returns: Promise<Void>
     */
    open class func deleteAllConnector() -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAllConnectorWithRequestBuilder().execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete all inbox connectors
     - DELETE /connectors
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAllConnectorWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/connectors"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an inbox connector
     
     - parameter _id: (path)  
     - returns: Promise<Void>
     */
    open class func deleteConnector( _id: UUID) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteConnectorWithRequestBuilder(_id: _id).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete an inbox connector
     - DELETE /connectors/{id}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteConnectorWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/connectors/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an inbox connector IMAP connection
     
     - parameter _id: (path)  
     - returns: Promise<Void>
     */
    open class func deleteConnectorImapConnection( _id: UUID) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteConnectorImapConnectionWithRequestBuilder(_id: _id).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete an inbox connector IMAP connection
     - DELETE /connectors/{id}/imap
     - Delete IMAP connection for external inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteConnectorImapConnectionWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/connectors/{id}/imap"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an inbox connector SMTP connection
     
     - parameter _id: (path)  
     - returns: Promise<Void>
     */
    open class func deleteConnectorSmtpConnection( _id: UUID) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteConnectorSmtpConnectionWithRequestBuilder(_id: _id).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete an inbox connector SMTP connection
     - DELETE /connectors/{id}/smtp
     - Delete SMTP connection for external inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteConnectorSmtpConnectionWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/connectors/{id}/smtp"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAllConnectorSyncEvents: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get all inbox connector sync events
     
     - parameter page: (query) Optional page index in connector list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in connector list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: Promise<PageConnectorSyncEvents>
     */
    open class func getAllConnectorSyncEvents( page: Int? = nil,  size: Int? = nil,  sort: Sort_getAllConnectorSyncEvents? = nil,  since: Date? = nil,  before: Date? = nil) -> Promise<PageConnectorSyncEvents> {
        let deferred = Promise<PageConnectorSyncEvents>.pending()
        getAllConnectorSyncEventsWithRequestBuilder(page: page, size: size, sort: sort, since: since, before: before).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all inbox connector sync events
     - GET /connectors/events
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter page: (query) Optional page index in connector list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in connector list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageConnectorSyncEvents> 
     */
    open class func getAllConnectorSyncEventsWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getAllConnectorSyncEvents? = nil, since: Date? = nil, before: Date? = nil) -> RequestBuilder<PageConnectorSyncEvents> {
        let localVariablePath = "/connectors/events"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageConnectorSyncEvents>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get an inbox connector
     
     - parameter _id: (path)  
     - returns: Promise<ConnectorDto>
     */
    open class func getConnector( _id: UUID) -> Promise<ConnectorDto> {
        let deferred = Promise<ConnectorDto>.pending()
        getConnectorWithRequestBuilder(_id: _id).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an inbox connector
     - GET /connectors/{id}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path)  
     - returns: RequestBuilder<ConnectorDto> 
     */
    open class func getConnectorWithRequestBuilder(_id: UUID) -> RequestBuilder<ConnectorDto> {
        var localVariablePath = "/connectors/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectorDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get an inbox connector sync event
     
     - parameter _id: (path)  
     - returns: Promise<ConnectorSyncEventDto>
     */
    open class func getConnectorSyncEvent( _id: UUID) -> Promise<ConnectorSyncEventDto> {
        let deferred = Promise<ConnectorSyncEventDto>.pending()
        getConnectorSyncEventWithRequestBuilder(_id: _id).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an inbox connector sync event
     - GET /connectors/events/{id}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path)  
     - returns: RequestBuilder<ConnectorSyncEventDto> 
     */
    open class func getConnectorSyncEventWithRequestBuilder(_id: UUID) -> RequestBuilder<ConnectorSyncEventDto> {
        var localVariablePath = "/connectors/events/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectorSyncEventDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getConnectorSyncEvents: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get an inbox connector sync events
     
     - parameter _id: (path)  
     - parameter page: (query) Optional page index in connector list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in connector list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: Promise<PageConnectorSyncEvents>
     */
    open class func getConnectorSyncEvents( _id: UUID,  page: Int? = nil,  size: Int? = nil,  sort: Sort_getConnectorSyncEvents? = nil,  since: Date? = nil,  before: Date? = nil) -> Promise<PageConnectorSyncEvents> {
        let deferred = Promise<PageConnectorSyncEvents>.pending()
        getConnectorSyncEventsWithRequestBuilder(_id: _id, page: page, size: size, sort: sort, since: since, before: before).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an inbox connector sync events
     - GET /connectors/{id}/events
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path)  
     - parameter page: (query) Optional page index in connector list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in connector list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageConnectorSyncEvents> 
     */
    open class func getConnectorSyncEventsWithRequestBuilder(_id: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getConnectorSyncEvents? = nil, since: Date? = nil, before: Date? = nil) -> RequestBuilder<PageConnectorSyncEvents> {
        var localVariablePath = "/connectors/{id}/events"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageConnectorSyncEvents>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getConnectors: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get inbox connectors
     
     - parameter page: (query) Optional page index in connector list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in connector list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: Promise<PageConnector>
     */
    open class func getConnectors( page: Int? = nil,  size: Int? = nil,  sort: Sort_getConnectors? = nil,  since: Date? = nil,  before: Date? = nil) -> Promise<PageConnector> {
        let deferred = Promise<PageConnector>.pending()
        getConnectorsWithRequestBuilder(page: page, size: size, sort: sort, since: since, before: before).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get inbox connectors
     - GET /connectors
     - List inbox connectors that sync external emails to MailSlurp inboxes
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter page: (query) Optional page index in connector list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in connector list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageConnector> 
     */
    open class func getConnectorsWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getConnectors? = nil, since: Date? = nil, before: Date? = nil) -> RequestBuilder<PageConnector> {
        let localVariablePath = "/connectors"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageConnector>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Sync an inbox connector
     
     - parameter _id: (path)  
     - returns: Promise<ConnectorSyncRequestResult>
     */
    open class func syncConnector( _id: UUID) -> Promise<ConnectorSyncRequestResult> {
        let deferred = Promise<ConnectorSyncRequestResult>.pending()
        syncConnectorWithRequestBuilder(_id: _id).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Sync an inbox connector
     - POST /connectors/{id}/sync
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path)  
     - returns: RequestBuilder<ConnectorSyncRequestResult> 
     */
    open class func syncConnectorWithRequestBuilder(_id: UUID) -> RequestBuilder<ConnectorSyncRequestResult> {
        var localVariablePath = "/connectors/{id}/sync"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectorSyncRequestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update an inbox connector
     
     - parameter _id: (path)  
     - parameter createConnectorOptions: (body)  
     - returns: Promise<ConnectorDto>
     */
    open class func updateConnector( _id: UUID,  createConnectorOptions: CreateConnectorOptions) -> Promise<ConnectorDto> {
        let deferred = Promise<ConnectorDto>.pending()
        updateConnectorWithRequestBuilder(_id: _id, createConnectorOptions: createConnectorOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Update an inbox connector
     - PUT /connectors/{id}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path)  
     - parameter createConnectorOptions: (body)  
     - returns: RequestBuilder<ConnectorDto> 
     */
    open class func updateConnectorWithRequestBuilder(_id: UUID, createConnectorOptions: CreateConnectorOptions) -> RequestBuilder<ConnectorDto> {
        var localVariablePath = "/connectors/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createConnectorOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectorDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
