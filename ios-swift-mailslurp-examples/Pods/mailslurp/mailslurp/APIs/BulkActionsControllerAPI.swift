//
// BulkActionsControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class BulkActionsControllerAPI : NSObject {

    /**
     Bulk create Inboxes (email addresses)
     
     - parameter count: (query) Number of inboxes to be created in bulk 
     - returns: Promise<[InboxDto]>
     */
    open class func bulkCreateInboxes( count: Int) -> Promise<[InboxDto]> {
        let deferred = Promise<[InboxDto]>.pending()
        bulkCreateInboxesWithRequestBuilder(count: count).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Bulk create Inboxes (email addresses)
     - POST /bulk/inboxes
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter count: (query) Number of inboxes to be created in bulk 
     - returns: RequestBuilder<[InboxDto]> 
     */
    open class func bulkCreateInboxesWithRequestBuilder(count: Int) -> RequestBuilder<[InboxDto]> {
        let localVariablePath = "/bulk/inboxes"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": (wrappedValue: count.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[InboxDto]>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Bulk Delete Inboxes
     
     - parameter requestBody: (body)  
     - returns: Promise<Void>
     */
    open class func bulkDeleteInboxes( requestBody: [UUID]) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        bulkDeleteInboxesWithRequestBuilder(requestBody: requestBody).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Bulk Delete Inboxes
     - DELETE /bulk/inboxes
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func bulkDeleteInboxesWithRequestBuilder(requestBody: [UUID]) -> RequestBuilder<Void> {
        let localVariablePath = "/bulk/inboxes"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Bulk Send Emails
     
     - parameter bulkSendEmailOptions: (body)  
     - returns: Promise<Void>
     */
    open class func bulkSendEmails( bulkSendEmailOptions: BulkSendEmailOptions) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        bulkSendEmailsWithRequestBuilder(bulkSendEmailOptions: bulkSendEmailOptions).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Bulk Send Emails
     - POST /bulk/send
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter bulkSendEmailOptions: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func bulkSendEmailsWithRequestBuilder(bulkSendEmailOptions: BulkSendEmailOptions) -> RequestBuilder<Void> {
        let localVariablePath = "/bulk/send"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bulkSendEmailOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
