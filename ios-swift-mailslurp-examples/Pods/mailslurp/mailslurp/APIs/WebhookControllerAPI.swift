//
// WebhookControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class WebhookControllerAPI : NSObject {

    /**
     Attach a WebHook URL to an inbox
     
     - parameter createWebhookOptions: (body)  
     - returns: Promise<WebhookDto>
     */
    open class func createAccountWebhook( createWebhookOptions: CreateWebhookOptions) -> Promise<WebhookDto> {
        let deferred = Promise<WebhookDto>.pending()
        createAccountWebhookWithRequestBuilder(createWebhookOptions: createWebhookOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Attach a WebHook URL to an inbox
     - POST /webhooks
     - Get notified of account level events such as bounce and bounce recipient.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter createWebhookOptions: (body)  
     - returns: RequestBuilder<WebhookDto> 
     */
    open class func createAccountWebhookWithRequestBuilder(createWebhookOptions: CreateWebhookOptions) -> RequestBuilder<WebhookDto> {
        let localVariablePath = "/webhooks"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createWebhookOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Attach a WebHook URL to an inbox
     
     - parameter inboxId: (path)  
     - parameter createWebhookOptions: (body)  
     - returns: Promise<WebhookDto>
     */
    open class func createWebhook( inboxId: UUID,  createWebhookOptions: CreateWebhookOptions) -> Promise<WebhookDto> {
        let deferred = Promise<WebhookDto>.pending()
        createWebhookWithRequestBuilder(inboxId: inboxId, createWebhookOptions: createWebhookOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Attach a WebHook URL to an inbox
     - POST /inboxes/{inboxId}/webhooks
     - Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path)  
     - parameter createWebhookOptions: (body)  
     - returns: RequestBuilder<WebhookDto> 
     */
    open class func createWebhookWithRequestBuilder(inboxId: UUID, createWebhookOptions: CreateWebhookOptions) -> RequestBuilder<WebhookDto> {
        var localVariablePath = "/inboxes/{inboxId}/webhooks"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createWebhookOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Attach a WebHook URL to a phone number
     
     - parameter phoneNumberId: (path)  
     - parameter createWebhookOptions: (body)  
     - returns: Promise<WebhookDto>
     */
    open class func createWebhookForPhoneNumber( phoneNumberId: UUID,  createWebhookOptions: CreateWebhookOptions) -> Promise<WebhookDto> {
        let deferred = Promise<WebhookDto>.pending()
        createWebhookForPhoneNumberWithRequestBuilder(phoneNumberId: phoneNumberId, createWebhookOptions: createWebhookOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Attach a WebHook URL to a phone number
     - POST /phone/numbers/{phoneNumberId}/webhooks
     - Get notified whenever a phone number receives an SMS via a WebHook URL.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter phoneNumberId: (path)  
     - parameter createWebhookOptions: (body)  
     - returns: RequestBuilder<WebhookDto> 
     */
    open class func createWebhookForPhoneNumberWithRequestBuilder(phoneNumberId: UUID, createWebhookOptions: CreateWebhookOptions) -> RequestBuilder<WebhookDto> {
        var localVariablePath = "/phone/numbers/{phoneNumberId}/webhooks"
        let phoneNumberIdPreEscape = "\(APIHelper.mapValueToPathItem(phoneNumberId))"
        let phoneNumberIdPostEscape = phoneNumberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{phoneNumberId}", with: phoneNumberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createWebhookOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete all webhooks
     
     - parameter before: (query) before (optional)
     - returns: Promise<Void>
     */
    open class func deleteAllWebhooks( before: Date? = nil) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAllWebhooksWithRequestBuilder(before: before).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete all webhooks
     - DELETE /webhooks
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter before: (query) before (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAllWebhooksWithRequestBuilder(before: Date? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/webhooks"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete and disable a Webhook for an Inbox
     
     - parameter inboxId: (path)  
     - parameter webhookId: (path)  
     - returns: Promise<Void>
     */
    open class func deleteWebhook( inboxId: UUID,  webhookId: UUID) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteWebhookWithRequestBuilder(inboxId: inboxId, webhookId: webhookId).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete and disable a Webhook for an Inbox
     - DELETE /inboxes/{inboxId}/webhooks/{webhookId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path)  
     - parameter webhookId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteWebhookWithRequestBuilder(inboxId: UUID, webhookId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/inboxes/{inboxId}/webhooks/{webhookId}"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete a webhook
     
     - parameter webhookId: (path)  
     - returns: Promise<Void>
     */
    open class func deleteWebhookById( webhookId: UUID) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteWebhookByIdWithRequestBuilder(webhookId: webhookId).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete a webhook
     - DELETE /webhooks/{webhookId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteWebhookByIdWithRequestBuilder(webhookId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/webhooks/{webhookId}"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAllAccountWebhooks: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     * enum for parameter eventType
     */
    public enum EventType_getAllAccountWebhooks: String, CaseIterable {
        case emailReceived = "EMAIL_RECEIVED"
        case newEmail = "NEW_EMAIL"
        case newContact = "NEW_CONTACT"
        case newAttachment = "NEW_ATTACHMENT"
        case emailOpened = "EMAIL_OPENED"
        case emailRead = "EMAIL_READ"
        case deliveryStatus = "DELIVERY_STATUS"
        case bounce = "BOUNCE"
        case bounceRecipient = "BOUNCE_RECIPIENT"
        case newSms = "NEW_SMS"
    }

    /**
     List account webhooks Paginated
     
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size for paginated result list. (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter eventType: (query) Optional event type (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: Promise<PageWebhookProjection>
     */
    open class func getAllAccountWebhooks( page: Int? = nil,  size: Int? = nil,  sort: Sort_getAllAccountWebhooks? = nil,  eventType: EventType_getAllAccountWebhooks? = nil,  since: Date? = nil,  before: Date? = nil) -> Promise<PageWebhookProjection> {
        let deferred = Promise<PageWebhookProjection>.pending()
        getAllAccountWebhooksWithRequestBuilder(page: page, size: size, sort: sort, eventType: eventType, since: since, before: before).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List account webhooks Paginated
     - GET /webhooks/account/paginated
     - List account webhooks in paginated form. Allows for page index, page size, and sort direction.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size for paginated result list. (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter eventType: (query) Optional event type (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageWebhookProjection> 
     */
    open class func getAllAccountWebhooksWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getAllAccountWebhooks? = nil, eventType: EventType_getAllAccountWebhooks? = nil, since: Date? = nil, before: Date? = nil) -> RequestBuilder<PageWebhookProjection> {
        let localVariablePath = "/webhooks/account/paginated"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "eventType": (wrappedValue: eventType?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageWebhookProjection>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAllWebhookResults: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     * enum for parameter resultType
     */
    public enum ResultType_getAllWebhookResults: String, CaseIterable {
        case badResponse = "BAD_RESPONSE"
        case exception = "EXCEPTION"
        case success = "SUCCESS"
        case redriven = "REDRIVEN"
    }

    /**
     * enum for parameter eventName
     */
    public enum EventName_getAllWebhookResults: String, CaseIterable {
        case emailReceived = "EMAIL_RECEIVED"
        case newEmail = "NEW_EMAIL"
        case newContact = "NEW_CONTACT"
        case newAttachment = "NEW_ATTACHMENT"
        case emailOpened = "EMAIL_OPENED"
        case emailRead = "EMAIL_READ"
        case deliveryStatus = "DELIVERY_STATUS"
        case bounce = "BOUNCE"
        case bounceRecipient = "BOUNCE_RECIPIENT"
        case newSms = "NEW_SMS"
    }

    /**
     Get results for all webhooks
     
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter unseenOnly: (query) Filter for unseen exceptions only (optional)
     - parameter resultType: (query) Filter by result type (optional)
     - parameter eventName: (query) Filter by event name (optional)
     - parameter minStatusCode: (query) Minimum response status (optional)
     - parameter maxStatusCode: (query) Maximum response status (optional)
     - parameter inboxId: (query) Inbox ID (optional)
     - parameter smsId: (query) Sms ID (optional)
     - parameter attachmentId: (query) Attachment ID (optional)
     - parameter emailId: (query) Email ID (optional)
     - parameter phoneId: (query) Phone ID (optional)
     - returns: Promise<PageWebhookResult>
     */
    open class func getAllWebhookResults( page: Int? = nil,  size: Int? = nil,  sort: Sort_getAllWebhookResults? = nil,  searchFilter: String? = nil,  since: Date? = nil,  before: Date? = nil,  unseenOnly: Bool? = nil,  resultType: ResultType_getAllWebhookResults? = nil,  eventName: EventName_getAllWebhookResults? = nil,  minStatusCode: Int? = nil,  maxStatusCode: Int? = nil,  inboxId: UUID? = nil,  smsId: UUID? = nil,  attachmentId: UUID? = nil,  emailId: UUID? = nil,  phoneId: UUID? = nil) -> Promise<PageWebhookResult> {
        let deferred = Promise<PageWebhookResult>.pending()
        getAllWebhookResultsWithRequestBuilder(page: page, size: size, sort: sort, searchFilter: searchFilter, since: since, before: before, unseenOnly: unseenOnly, resultType: resultType, eventName: eventName, minStatusCode: minStatusCode, maxStatusCode: maxStatusCode, inboxId: inboxId, smsId: smsId, attachmentId: attachmentId, emailId: emailId, phoneId: phoneId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get results for all webhooks
     - GET /webhooks/results
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter unseenOnly: (query) Filter for unseen exceptions only (optional)
     - parameter resultType: (query) Filter by result type (optional)
     - parameter eventName: (query) Filter by event name (optional)
     - parameter minStatusCode: (query) Minimum response status (optional)
     - parameter maxStatusCode: (query) Maximum response status (optional)
     - parameter inboxId: (query) Inbox ID (optional)
     - parameter smsId: (query) Sms ID (optional)
     - parameter attachmentId: (query) Attachment ID (optional)
     - parameter emailId: (query) Email ID (optional)
     - parameter phoneId: (query) Phone ID (optional)
     - returns: RequestBuilder<PageWebhookResult> 
     */
    open class func getAllWebhookResultsWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getAllWebhookResults? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, unseenOnly: Bool? = nil, resultType: ResultType_getAllWebhookResults? = nil, eventName: EventName_getAllWebhookResults? = nil, minStatusCode: Int? = nil, maxStatusCode: Int? = nil, inboxId: UUID? = nil, smsId: UUID? = nil, attachmentId: UUID? = nil, emailId: UUID? = nil, phoneId: UUID? = nil) -> RequestBuilder<PageWebhookResult> {
        let localVariablePath = "/webhooks/results"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "searchFilter": (wrappedValue: searchFilter?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
            "unseenOnly": (wrappedValue: unseenOnly?.encodeToJSON(), isExplode: true),
            "resultType": (wrappedValue: resultType?.encodeToJSON(), isExplode: true),
            "eventName": (wrappedValue: eventName?.encodeToJSON(), isExplode: true),
            "minStatusCode": (wrappedValue: minStatusCode?.encodeToJSON(), isExplode: true),
            "maxStatusCode": (wrappedValue: maxStatusCode?.encodeToJSON(), isExplode: true),
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
            "smsId": (wrappedValue: smsId?.encodeToJSON(), isExplode: true),
            "attachmentId": (wrappedValue: attachmentId?.encodeToJSON(), isExplode: true),
            "emailId": (wrappedValue: emailId?.encodeToJSON(), isExplode: true),
            "phoneId": (wrappedValue: phoneId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageWebhookResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAllWebhooks: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List Webhooks Paginated
     
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size for paginated result list. (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter inboxId: (query) Filter by inboxId (optional)
     - parameter phoneId: (query) Filter by phoneId (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: Promise<PageWebhookProjection>
     */
    open class func getAllWebhooks( page: Int? = nil,  size: Int? = nil,  sort: Sort_getAllWebhooks? = nil,  searchFilter: String? = nil,  since: Date? = nil,  inboxId: UUID? = nil,  phoneId: UUID? = nil,  before: Date? = nil) -> Promise<PageWebhookProjection> {
        let deferred = Promise<PageWebhookProjection>.pending()
        getAllWebhooksWithRequestBuilder(page: page, size: size, sort: sort, searchFilter: searchFilter, since: since, inboxId: inboxId, phoneId: phoneId, before: before).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List Webhooks Paginated
     - GET /webhooks/paginated
     - List webhooks in paginated form. Allows for page index, page size, and sort direction.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size for paginated result list. (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter inboxId: (query) Filter by inboxId (optional)
     - parameter phoneId: (query) Filter by phoneId (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageWebhookProjection> 
     */
    open class func getAllWebhooksWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getAllWebhooks? = nil, searchFilter: String? = nil, since: Date? = nil, inboxId: UUID? = nil, phoneId: UUID? = nil, before: Date? = nil) -> RequestBuilder<PageWebhookProjection> {
        let localVariablePath = "/webhooks/paginated"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "searchFilter": (wrappedValue: searchFilter?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
            "phoneId": (wrappedValue: phoneId?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageWebhookProjection>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getInboxWebhooksPaginated: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get paginated webhooks for an Inbox
     
     - parameter inboxId: (path)  
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: Promise<PageWebhookProjection>
     */
    open class func getInboxWebhooksPaginated( inboxId: UUID,  page: Int? = nil,  size: Int? = nil,  sort: Sort_getInboxWebhooksPaginated? = nil,  searchFilter: String? = nil,  since: Date? = nil,  before: Date? = nil) -> Promise<PageWebhookProjection> {
        let deferred = Promise<PageWebhookProjection>.pending()
        getInboxWebhooksPaginatedWithRequestBuilder(inboxId: inboxId, page: page, size: size, sort: sort, searchFilter: searchFilter, since: since, before: before).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get paginated webhooks for an Inbox
     - GET /inboxes/{inboxId}/webhooks/paginated
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path)  
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageWebhookProjection> 
     */
    open class func getInboxWebhooksPaginatedWithRequestBuilder(inboxId: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getInboxWebhooksPaginated? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil) -> RequestBuilder<PageWebhookProjection> {
        var localVariablePath = "/inboxes/{inboxId}/webhooks/paginated"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "searchFilter": (wrappedValue: searchFilter?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageWebhookProjection>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter event
     */
    public enum Event_getJsonSchemaForWebhookEvent: String, CaseIterable {
        case emailReceived = "EMAIL_RECEIVED"
        case newEmail = "NEW_EMAIL"
        case newContact = "NEW_CONTACT"
        case newAttachment = "NEW_ATTACHMENT"
        case emailOpened = "EMAIL_OPENED"
        case emailRead = "EMAIL_READ"
        case deliveryStatus = "DELIVERY_STATUS"
        case bounce = "BOUNCE"
        case bounceRecipient = "BOUNCE_RECIPIENT"
        case newSms = "NEW_SMS"
    }

    /**

     - parameter event: (query)  
     - returns: Promise<JSONSchemaDto>
     */
    open class func getJsonSchemaForWebhookEvent( event: Event_getJsonSchemaForWebhookEvent) -> Promise<JSONSchemaDto> {
        let deferred = Promise<JSONSchemaDto>.pending()
        getJsonSchemaForWebhookEventWithRequestBuilder(event: event).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /webhooks/schema
     - Get JSON Schema definition for webhook payload by event
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter event: (query)  
     - returns: RequestBuilder<JSONSchemaDto> 
     */
    open class func getJsonSchemaForWebhookEventWithRequestBuilder(event: Event_getJsonSchemaForWebhookEvent) -> RequestBuilder<JSONSchemaDto> {
        let localVariablePath = "/webhooks/schema"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "event": (wrappedValue: event.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONSchemaDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter webhookId: (path)  
     - returns: Promise<JSONSchemaDto>
     */
    open class func getJsonSchemaForWebhookPayload( webhookId: UUID) -> Promise<JSONSchemaDto> {
        let deferred = Promise<JSONSchemaDto>.pending()
        getJsonSchemaForWebhookPayloadWithRequestBuilder(webhookId: webhookId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /webhooks/{webhookId}/schema
     - Get JSON Schema definition for webhook payload
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path)  
     - returns: RequestBuilder<JSONSchemaDto> 
     */
    open class func getJsonSchemaForWebhookPayloadWithRequestBuilder(webhookId: UUID) -> RequestBuilder<JSONSchemaDto> {
        var localVariablePath = "/webhooks/{webhookId}/schema"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONSchemaDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getPhoneNumberWebhooksPaginated: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get paginated webhooks for a phone number
     
     - parameter phoneId: (path)  
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: Promise<PageWebhookProjection>
     */
    open class func getPhoneNumberWebhooksPaginated( phoneId: UUID,  page: Int? = nil,  size: Int? = nil,  sort: Sort_getPhoneNumberWebhooksPaginated? = nil,  since: Date? = nil,  before: Date? = nil) -> Promise<PageWebhookProjection> {
        let deferred = Promise<PageWebhookProjection>.pending()
        getPhoneNumberWebhooksPaginatedWithRequestBuilder(phoneId: phoneId, page: page, size: size, sort: sort, since: since, before: before).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get paginated webhooks for a phone number
     - GET /phone/numbers/{phoneId}/webhooks/paginated
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter phoneId: (path)  
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageWebhookProjection> 
     */
    open class func getPhoneNumberWebhooksPaginatedWithRequestBuilder(phoneId: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getPhoneNumberWebhooksPaginated? = nil, since: Date? = nil, before: Date? = nil) -> RequestBuilder<PageWebhookProjection> {
        var localVariablePath = "/phone/numbers/{phoneId}/webhooks/paginated"
        let phoneIdPreEscape = "\(APIHelper.mapValueToPathItem(phoneId))"
        let phoneIdPostEscape = phoneIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{phoneId}", with: phoneIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageWebhookProjection>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter eventName
     */
    public enum EventName_getTestWebhookPayload: String, CaseIterable {
        case emailReceived = "EMAIL_RECEIVED"
        case newEmail = "NEW_EMAIL"
        case newContact = "NEW_CONTACT"
        case newAttachment = "NEW_ATTACHMENT"
        case emailOpened = "EMAIL_OPENED"
        case emailRead = "EMAIL_READ"
        case deliveryStatus = "DELIVERY_STATUS"
        case bounce = "BOUNCE"
        case bounceRecipient = "BOUNCE_RECIPIENT"
        case newSms = "NEW_SMS"
    }

    /**

     - parameter eventName: (query)  (optional)
     - returns: Promise<AbstractWebhookPayload>
     */
    open class func getTestWebhookPayload( eventName: EventName_getTestWebhookPayload? = nil) -> Promise<AbstractWebhookPayload> {
        let deferred = Promise<AbstractWebhookPayload>.pending()
        getTestWebhookPayloadWithRequestBuilder(eventName: eventName).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /webhooks/test
     - Get test webhook payload example. Response content depends on eventName passed. Uses `EMAIL_RECEIVED` as default.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter eventName: (query)  (optional)
     - returns: RequestBuilder<AbstractWebhookPayload> 
     */
    open class func getTestWebhookPayloadWithRequestBuilder(eventName: EventName_getTestWebhookPayload? = nil) -> RequestBuilder<AbstractWebhookPayload> {
        let localVariablePath = "/webhooks/test"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eventName": (wrappedValue: eventName?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AbstractWebhookPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - returns: Promise<WebhookBouncePayload>
     */
    open class func getTestWebhookPayloadBounce() -> Promise<WebhookBouncePayload> {
        let deferred = Promise<WebhookBouncePayload>.pending()
        getTestWebhookPayloadBounceWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /webhooks/test/email-bounce-payload
     - Get webhook test payload for bounce
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookBouncePayload> 
     */
    open class func getTestWebhookPayloadBounceWithRequestBuilder() -> RequestBuilder<WebhookBouncePayload> {
        let localVariablePath = "/webhooks/test/email-bounce-payload"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookBouncePayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - returns: Promise<WebhookBounceRecipientPayload>
     */
    open class func getTestWebhookPayloadBounceRecipient() -> Promise<WebhookBounceRecipientPayload> {
        let deferred = Promise<WebhookBounceRecipientPayload>.pending()
        getTestWebhookPayloadBounceRecipientWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /webhooks/test/email-bounce-recipient-payload
     - Get webhook test payload for bounce recipient
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookBounceRecipientPayload> 
     */
    open class func getTestWebhookPayloadBounceRecipientWithRequestBuilder() -> RequestBuilder<WebhookBounceRecipientPayload> {
        let localVariablePath = "/webhooks/test/email-bounce-recipient-payload"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookBounceRecipientPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get webhook test payload for delivery status event
     
     - returns: Promise<WebhookDeliveryStatusPayload>
     */
    open class func getTestWebhookPayloadDeliveryStatus() -> Promise<WebhookDeliveryStatusPayload> {
        let deferred = Promise<WebhookDeliveryStatusPayload>.pending()
        getTestWebhookPayloadDeliveryStatusWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get webhook test payload for delivery status event
     - GET /webhooks/test/delivery-status-payload
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookDeliveryStatusPayload> 
     */
    open class func getTestWebhookPayloadDeliveryStatusWithRequestBuilder() -> RequestBuilder<WebhookDeliveryStatusPayload> {
        let localVariablePath = "/webhooks/test/delivery-status-payload"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookDeliveryStatusPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - returns: Promise<WebhookEmailOpenedPayload>
     */
    open class func getTestWebhookPayloadEmailOpened() -> Promise<WebhookEmailOpenedPayload> {
        let deferred = Promise<WebhookEmailOpenedPayload>.pending()
        getTestWebhookPayloadEmailOpenedWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /webhooks/test/email-opened-payload
     - Get webhook test payload for email opened event
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookEmailOpenedPayload> 
     */
    open class func getTestWebhookPayloadEmailOpenedWithRequestBuilder() -> RequestBuilder<WebhookEmailOpenedPayload> {
        let localVariablePath = "/webhooks/test/email-opened-payload"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookEmailOpenedPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - returns: Promise<WebhookEmailReadPayload>
     */
    open class func getTestWebhookPayloadEmailRead() -> Promise<WebhookEmailReadPayload> {
        let deferred = Promise<WebhookEmailReadPayload>.pending()
        getTestWebhookPayloadEmailReadWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /webhooks/test/email-read-payload
     - Get webhook test payload for email opened event
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookEmailReadPayload> 
     */
    open class func getTestWebhookPayloadEmailReadWithRequestBuilder() -> RequestBuilder<WebhookEmailReadPayload> {
        let localVariablePath = "/webhooks/test/email-read-payload"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookEmailReadPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter webhookId: (path)  
     - returns: Promise<AbstractWebhookPayload>
     */
    open class func getTestWebhookPayloadForWebhook( webhookId: UUID) -> Promise<AbstractWebhookPayload> {
        let deferred = Promise<AbstractWebhookPayload>.pending()
        getTestWebhookPayloadForWebhookWithRequestBuilder(webhookId: webhookId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /webhooks/{webhookId}/example
     - Get example payload for webhook
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path)  
     - returns: RequestBuilder<AbstractWebhookPayload> 
     */
    open class func getTestWebhookPayloadForWebhookWithRequestBuilder(webhookId: UUID) -> RequestBuilder<AbstractWebhookPayload> {
        var localVariablePath = "/webhooks/{webhookId}/example"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AbstractWebhookPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get webhook test payload for new attachment event
     
     - returns: Promise<WebhookNewAttachmentPayload>
     */
    open class func getTestWebhookPayloadNewAttachment() -> Promise<WebhookNewAttachmentPayload> {
        let deferred = Promise<WebhookNewAttachmentPayload>.pending()
        getTestWebhookPayloadNewAttachmentWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get webhook test payload for new attachment event
     - GET /webhooks/test/new-attachment-payload
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookNewAttachmentPayload> 
     */
    open class func getTestWebhookPayloadNewAttachmentWithRequestBuilder() -> RequestBuilder<WebhookNewAttachmentPayload> {
        let localVariablePath = "/webhooks/test/new-attachment-payload"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookNewAttachmentPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get webhook test payload for new contact event
     
     - returns: Promise<WebhookNewContactPayload>
     */
    open class func getTestWebhookPayloadNewContact() -> Promise<WebhookNewContactPayload> {
        let deferred = Promise<WebhookNewContactPayload>.pending()
        getTestWebhookPayloadNewContactWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get webhook test payload for new contact event
     - GET /webhooks/test/new-contact-payload
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookNewContactPayload> 
     */
    open class func getTestWebhookPayloadNewContactWithRequestBuilder() -> RequestBuilder<WebhookNewContactPayload> {
        let localVariablePath = "/webhooks/test/new-contact-payload"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookNewContactPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get webhook test payload for new email event
     
     - returns: Promise<WebhookNewEmailPayload>
     */
    open class func getTestWebhookPayloadNewEmail() -> Promise<WebhookNewEmailPayload> {
        let deferred = Promise<WebhookNewEmailPayload>.pending()
        getTestWebhookPayloadNewEmailWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get webhook test payload for new email event
     - GET /webhooks/test/new-email-payload
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookNewEmailPayload> 
     */
    open class func getTestWebhookPayloadNewEmailWithRequestBuilder() -> RequestBuilder<WebhookNewEmailPayload> {
        let localVariablePath = "/webhooks/test/new-email-payload"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookNewEmailPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get webhook test payload for new sms event
     
     - returns: Promise<WebhookNewSmsPayload>
     */
    open class func getTestWebhookPayloadNewSms() -> Promise<WebhookNewSmsPayload> {
        let deferred = Promise<WebhookNewSmsPayload>.pending()
        getTestWebhookPayloadNewSmsWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get webhook test payload for new sms event
     - GET /webhooks/test/new-sms-payload
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookNewSmsPayload> 
     */
    open class func getTestWebhookPayloadNewSmsWithRequestBuilder() -> RequestBuilder<WebhookNewSmsPayload> {
        let localVariablePath = "/webhooks/test/new-sms-payload"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookNewSmsPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a webhook
     
     - parameter webhookId: (path)  
     - returns: Promise<WebhookDto>
     */
    open class func getWebhook( webhookId: UUID) -> Promise<WebhookDto> {
        let deferred = Promise<WebhookDto>.pending()
        getWebhookWithRequestBuilder(webhookId: webhookId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a webhook
     - GET /webhooks/{webhookId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path)  
     - returns: RequestBuilder<WebhookDto> 
     */
    open class func getWebhookWithRequestBuilder(webhookId: UUID) -> RequestBuilder<WebhookDto> {
        var localVariablePath = "/webhooks/{webhookId}"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a webhook result for a webhook
     
     - parameter webhookResultId: (path) Webhook Result ID 
     - returns: Promise<WebhookResultDto>
     */
    open class func getWebhookResult( webhookResultId: UUID) -> Promise<WebhookResultDto> {
        let deferred = Promise<WebhookResultDto>.pending()
        getWebhookResultWithRequestBuilder(webhookResultId: webhookResultId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a webhook result for a webhook
     - GET /webhooks/results/{webhookResultId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookResultId: (path) Webhook Result ID 
     - returns: RequestBuilder<WebhookResultDto> 
     */
    open class func getWebhookResultWithRequestBuilder(webhookResultId: UUID) -> RequestBuilder<WebhookResultDto> {
        var localVariablePath = "/webhooks/results/{webhookResultId}"
        let webhookResultIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookResultId))"
        let webhookResultIdPostEscape = webhookResultIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookResultId}", with: webhookResultIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookResultDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getWebhookResults: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     * enum for parameter resultType
     */
    public enum ResultType_getWebhookResults: String, CaseIterable {
        case badResponse = "BAD_RESPONSE"
        case exception = "EXCEPTION"
        case success = "SUCCESS"
        case redriven = "REDRIVEN"
    }

    /**
     * enum for parameter eventName
     */
    public enum EventName_getWebhookResults: String, CaseIterable {
        case emailReceived = "EMAIL_RECEIVED"
        case newEmail = "NEW_EMAIL"
        case newContact = "NEW_CONTACT"
        case newAttachment = "NEW_ATTACHMENT"
        case emailOpened = "EMAIL_OPENED"
        case emailRead = "EMAIL_READ"
        case deliveryStatus = "DELIVERY_STATUS"
        case bounce = "BOUNCE"
        case bounceRecipient = "BOUNCE_RECIPIENT"
        case newSms = "NEW_SMS"
    }

    /**
     Get a webhook results for a webhook
     
     - parameter webhookId: (path) ID of webhook to get results for 
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter unseenOnly: (query) Filter for unseen exceptions only (optional)
     - parameter resultType: (query) Filter by result type (optional)
     - parameter eventName: (query) Filter by event name (optional)
     - parameter minStatusCode: (query) Minimum response status (optional)
     - parameter maxStatusCode: (query) Maximum response status (optional)
     - parameter inboxId: (query) Inbox ID (optional)
     - parameter smsId: (query) Sms ID (optional)
     - parameter attachmentId: (query) Attachment ID (optional)
     - parameter emailId: (query) Email ID (optional)
     - parameter phoneId: (query) Phone ID (optional)
     - returns: Promise<PageWebhookResult>
     */
    open class func getWebhookResults( webhookId: UUID,  page: Int? = nil,  size: Int? = nil,  sort: Sort_getWebhookResults? = nil,  searchFilter: String? = nil,  since: Date? = nil,  before: Date? = nil,  unseenOnly: Bool? = nil,  resultType: ResultType_getWebhookResults? = nil,  eventName: EventName_getWebhookResults? = nil,  minStatusCode: Int? = nil,  maxStatusCode: Int? = nil,  inboxId: UUID? = nil,  smsId: UUID? = nil,  attachmentId: UUID? = nil,  emailId: UUID? = nil,  phoneId: UUID? = nil) -> Promise<PageWebhookResult> {
        let deferred = Promise<PageWebhookResult>.pending()
        getWebhookResultsWithRequestBuilder(webhookId: webhookId, page: page, size: size, sort: sort, searchFilter: searchFilter, since: since, before: before, unseenOnly: unseenOnly, resultType: resultType, eventName: eventName, minStatusCode: minStatusCode, maxStatusCode: maxStatusCode, inboxId: inboxId, smsId: smsId, attachmentId: attachmentId, emailId: emailId, phoneId: phoneId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a webhook results for a webhook
     - GET /webhooks/{webhookId}/results
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path) ID of webhook to get results for 
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter unseenOnly: (query) Filter for unseen exceptions only (optional)
     - parameter resultType: (query) Filter by result type (optional)
     - parameter eventName: (query) Filter by event name (optional)
     - parameter minStatusCode: (query) Minimum response status (optional)
     - parameter maxStatusCode: (query) Maximum response status (optional)
     - parameter inboxId: (query) Inbox ID (optional)
     - parameter smsId: (query) Sms ID (optional)
     - parameter attachmentId: (query) Attachment ID (optional)
     - parameter emailId: (query) Email ID (optional)
     - parameter phoneId: (query) Phone ID (optional)
     - returns: RequestBuilder<PageWebhookResult> 
     */
    open class func getWebhookResultsWithRequestBuilder(webhookId: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getWebhookResults? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, unseenOnly: Bool? = nil, resultType: ResultType_getWebhookResults? = nil, eventName: EventName_getWebhookResults? = nil, minStatusCode: Int? = nil, maxStatusCode: Int? = nil, inboxId: UUID? = nil, smsId: UUID? = nil, attachmentId: UUID? = nil, emailId: UUID? = nil, phoneId: UUID? = nil) -> RequestBuilder<PageWebhookResult> {
        var localVariablePath = "/webhooks/{webhookId}/results"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "searchFilter": (wrappedValue: searchFilter?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
            "unseenOnly": (wrappedValue: unseenOnly?.encodeToJSON(), isExplode: true),
            "resultType": (wrappedValue: resultType?.encodeToJSON(), isExplode: true),
            "eventName": (wrappedValue: eventName?.encodeToJSON(), isExplode: true),
            "minStatusCode": (wrappedValue: minStatusCode?.encodeToJSON(), isExplode: true),
            "maxStatusCode": (wrappedValue: maxStatusCode?.encodeToJSON(), isExplode: true),
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
            "smsId": (wrappedValue: smsId?.encodeToJSON(), isExplode: true),
            "attachmentId": (wrappedValue: attachmentId?.encodeToJSON(), isExplode: true),
            "emailId": (wrappedValue: emailId?.encodeToJSON(), isExplode: true),
            "phoneId": (wrappedValue: phoneId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageWebhookResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a webhook results count for a webhook
     
     - parameter webhookId: (path) ID of webhook to get results for 
     - returns: Promise<CountDto>
     */
    open class func getWebhookResultsCount( webhookId: UUID) -> Promise<CountDto> {
        let deferred = Promise<CountDto>.pending()
        getWebhookResultsCountWithRequestBuilder(webhookId: webhookId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a webhook results count for a webhook
     - GET /webhooks/{webhookId}/results/count
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path) ID of webhook to get results for 
     - returns: RequestBuilder<CountDto> 
     */
    open class func getWebhookResultsCountWithRequestBuilder(webhookId: UUID) -> RequestBuilder<CountDto> {
        var localVariablePath = "/webhooks/{webhookId}/results/count"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CountDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get count of unseen webhook results with error status
     
     - returns: Promise<UnseenErrorCountDto>
     */
    open class func getWebhookResultsUnseenErrorCount() -> Promise<UnseenErrorCountDto> {
        let deferred = Promise<UnseenErrorCountDto>.pending()
        getWebhookResultsUnseenErrorCountWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get count of unseen webhook results with error status
     - GET /webhooks/results/unseen-count
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<UnseenErrorCountDto> 
     */
    open class func getWebhookResultsUnseenErrorCountWithRequestBuilder() -> RequestBuilder<UnseenErrorCountDto> {
        let localVariablePath = "/webhooks/results/unseen-count"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnseenErrorCountDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all webhooks for an Inbox
     
     - parameter inboxId: (path)  
     - returns: Promise<[WebhookDto]>
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getWebhooks( inboxId: UUID) -> Promise<[WebhookDto]> {
        let deferred = Promise<[WebhookDto]>.pending()
        getWebhooksWithRequestBuilder(inboxId: inboxId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all webhooks for an Inbox
     - GET /inboxes/{inboxId}/webhooks
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path)  
     - returns: RequestBuilder<[WebhookDto]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getWebhooksWithRequestBuilder(inboxId: UUID) -> RequestBuilder<[WebhookDto]> {
        var localVariablePath = "/inboxes/{inboxId}/webhooks"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[WebhookDto]>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Redrive all webhook results that have failed status
     
     - returns: Promise<WebhookRedriveAllResult>
     */
    open class func redriveAllWebhookResults() -> Promise<WebhookRedriveAllResult> {
        let deferred = Promise<WebhookRedriveAllResult>.pending()
        redriveAllWebhookResultsWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Redrive all webhook results that have failed status
     - POST /webhooks/results/redrive
     - Allows you to resend webhook payloads for any recorded webhook result that failed to deliver the payload.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookRedriveAllResult> 
     */
    open class func redriveAllWebhookResultsWithRequestBuilder() -> RequestBuilder<WebhookRedriveAllResult> {
        let localVariablePath = "/webhooks/results/redrive"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookRedriveAllResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a webhook result and try to resend the original webhook payload
     
     - parameter webhookResultId: (path) Webhook Result ID 
     - returns: Promise<WebhookRedriveResult>
     */
    open class func redriveWebhookResult( webhookResultId: UUID) -> Promise<WebhookRedriveResult> {
        let deferred = Promise<WebhookRedriveResult>.pending()
        redriveWebhookResultWithRequestBuilder(webhookResultId: webhookResultId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a webhook result and try to resend the original webhook payload
     - POST /webhooks/results/{webhookResultId}/redrive
     - Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookResultId: (path) Webhook Result ID 
     - returns: RequestBuilder<WebhookRedriveResult> 
     */
    open class func redriveWebhookResultWithRequestBuilder(webhookResultId: UUID) -> RequestBuilder<WebhookRedriveResult> {
        var localVariablePath = "/webhooks/results/{webhookResultId}/redrive"
        let webhookResultIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookResultId))"
        let webhookResultIdPostEscape = webhookResultIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookResultId}", with: webhookResultIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookRedriveResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Send webhook test data
     
     - parameter webhookId: (path)  
     - returns: Promise<WebhookTestResult>
     */
    open class func sendTestData( webhookId: UUID) -> Promise<WebhookTestResult> {
        let deferred = Promise<WebhookTestResult>.pending()
        sendTestDataWithRequestBuilder(webhookId: webhookId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Send webhook test data
     - POST /webhooks/{webhookId}/test
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path)  
     - returns: RequestBuilder<WebhookTestResult> 
     */
    open class func sendTestDataWithRequestBuilder(webhookId: UUID) -> RequestBuilder<WebhookTestResult> {
        var localVariablePath = "/webhooks/{webhookId}/test"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update a webhook request headers
     
     - parameter webhookId: (path)  
     - parameter webhookHeaders: (body)  
     - returns: Promise<WebhookDto>
     */
    open class func updateWebhookHeaders( webhookId: UUID,  webhookHeaders: WebhookHeaders) -> Promise<WebhookDto> {
        let deferred = Promise<WebhookDto>.pending()
        updateWebhookHeadersWithRequestBuilder(webhookId: webhookId, webhookHeaders: webhookHeaders).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Update a webhook request headers
     - PUT /webhooks/{webhookId}/headers
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path)  
     - parameter webhookHeaders: (body)  
     - returns: RequestBuilder<WebhookDto> 
     */
    open class func updateWebhookHeadersWithRequestBuilder(webhookId: UUID, webhookHeaders: WebhookHeaders) -> RequestBuilder<WebhookDto> {
        var localVariablePath = "/webhooks/{webhookId}/headers"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: webhookHeaders)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Verify a webhook payload signature
     
     - parameter verifyWebhookSignatureOptions: (body)  
     - returns: Promise<VerifyWebhookSignatureResults>
     */
    open class func verifyWebhookSignature( verifyWebhookSignatureOptions: VerifyWebhookSignatureOptions) -> Promise<VerifyWebhookSignatureResults> {
        let deferred = Promise<VerifyWebhookSignatureResults>.pending()
        verifyWebhookSignatureWithRequestBuilder(verifyWebhookSignatureOptions: verifyWebhookSignatureOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Verify a webhook payload signature
     - POST /webhooks/verify
     - Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter verifyWebhookSignatureOptions: (body)  
     - returns: RequestBuilder<VerifyWebhookSignatureResults> 
     */
    open class func verifyWebhookSignatureWithRequestBuilder(verifyWebhookSignatureOptions: VerifyWebhookSignatureOptions) -> RequestBuilder<VerifyWebhookSignatureResults> {
        let localVariablePath = "/webhooks/verify"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verifyWebhookSignatureOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerifyWebhookSignatureResults>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Wait for webhook results for a webhook
     
     - parameter webhookId: (path) ID of webhook to get results for 
     - parameter expectedCount: (query) Expected result count 
     - parameter timeout: (query) Max time to wait in milliseconds 
     - returns: Promise<[WebhookResultDto]>
     */
    open class func waitForWebhookResults( webhookId: UUID,  expectedCount: Int,  timeout: Int) -> Promise<[WebhookResultDto]> {
        let deferred = Promise<[WebhookResultDto]>.pending()
        waitForWebhookResultsWithRequestBuilder(webhookId: webhookId, expectedCount: expectedCount, timeout: timeout).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Wait for webhook results for a webhook
     - GET /webhooks/{webhookId}/wait
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path) ID of webhook to get results for 
     - parameter expectedCount: (query) Expected result count 
     - parameter timeout: (query) Max time to wait in milliseconds 
     - returns: RequestBuilder<[WebhookResultDto]> 
     */
    open class func waitForWebhookResultsWithRequestBuilder(webhookId: UUID, expectedCount: Int, timeout: Int) -> RequestBuilder<[WebhookResultDto]> {
        var localVariablePath = "/webhooks/{webhookId}/wait"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expectedCount": (wrappedValue: expectedCount.encodeToJSON(), isExplode: true),
            "timeout": (wrappedValue: timeout.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[WebhookResultDto]>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
