//
// InboxForwarderControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class InboxForwarderControllerAPI : NSObject {

    /**
     Create an inbox forwarder
     
     - parameter inboxId: (query) Inbox id to attach forwarder to 
     - parameter createInboxForwarderOptions: (body)  
     - returns: Promise<InboxForwarderDto>
     */
    open class func createNewInboxForwarder( inboxId: UUID,  createInboxForwarderOptions: CreateInboxForwarderOptions) -> Promise<InboxForwarderDto> {
        let deferred = Promise<InboxForwarderDto>.pending()
        createNewInboxForwarderWithRequestBuilder(inboxId: inboxId, createInboxForwarderOptions: createInboxForwarderOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create an inbox forwarder
     - POST /forwarders
     - Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Inbox id to attach forwarder to 
     - parameter createInboxForwarderOptions: (body)  
     - returns: RequestBuilder<InboxForwarderDto> 
     */
    open class func createNewInboxForwarderWithRequestBuilder(inboxId: UUID, createInboxForwarderOptions: CreateInboxForwarderOptions) -> RequestBuilder<InboxForwarderDto> {
        let localVariablePath = "/forwarders"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createInboxForwarderOptions)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxForwarderDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an inbox forwarder
     
     - parameter _id: (path) ID of inbox forwarder 
     - returns: Promise<Void>
     */
    open class func deleteInboxForwarder( _id: UUID) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteInboxForwarderWithRequestBuilder(_id: _id).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete an inbox forwarder
     - DELETE /forwarders/{id}
     - Delete inbox forwarder
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox forwarder 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteInboxForwarderWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/forwarders/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete inbox forwarders
     
     - parameter inboxId: (query) Optional inbox id to attach forwarder to (optional)
     - returns: Promise<Void>
     */
    open class func deleteInboxForwarders( inboxId: UUID? = nil) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteInboxForwardersWithRequestBuilder(inboxId: inboxId).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete inbox forwarders
     - DELETE /forwarders
     - Delete inbox forwarders. Accepts optional inboxId filter.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox id to attach forwarder to (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteInboxForwardersWithRequestBuilder(inboxId: UUID? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/forwarders"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAllInboxForwarderEvents: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get all inbox forwarder events
     
     - parameter page: (query) Optional page index in inbox forwarder event list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox forwarder event list pagination (optional, default to 20)
     - parameter inboxId: (query) Optional inbox ID to filter for (optional)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: Promise<PageInboxForwarderEvents>
     */
    open class func getAllInboxForwarderEvents( page: Int? = nil,  size: Int? = nil,  inboxId: UUID? = nil,  sort: Sort_getAllInboxForwarderEvents? = nil) -> Promise<PageInboxForwarderEvents> {
        let deferred = Promise<PageInboxForwarderEvents>.pending()
        getAllInboxForwarderEventsWithRequestBuilder(page: page, size: size, inboxId: inboxId, sort: sort).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all inbox forwarder events
     - GET /forwarders/events
     - Get all inbox forwarder events
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter page: (query) Optional page index in inbox forwarder event list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox forwarder event list pagination (optional, default to 20)
     - parameter inboxId: (query) Optional inbox ID to filter for (optional)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageInboxForwarderEvents> 
     */
    open class func getAllInboxForwarderEventsWithRequestBuilder(page: Int? = nil, size: Int? = nil, inboxId: UUID? = nil, sort: Sort_getAllInboxForwarderEvents? = nil) -> RequestBuilder<PageInboxForwarderEvents> {
        let localVariablePath = "/forwarders/events"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageInboxForwarderEvents>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a forwarder event
     
     - parameter eventId: (path) ID of inbox forwarder event 
     - returns: Promise<InboxForwarderEventDto>
     */
    open class func getForwarderEvent( eventId: UUID) -> Promise<InboxForwarderEventDto> {
        let deferred = Promise<InboxForwarderEventDto>.pending()
        getForwarderEventWithRequestBuilder(eventId: eventId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a forwarder event
     - GET /forwarders/events/{eventId}
     - Get forwarder event
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter eventId: (path) ID of inbox forwarder event 
     - returns: RequestBuilder<InboxForwarderEventDto> 
     */
    open class func getForwarderEventWithRequestBuilder(eventId: UUID) -> RequestBuilder<InboxForwarderEventDto> {
        var localVariablePath = "/forwarders/events/{eventId}"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxForwarderEventDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get an inbox forwarder
     
     - parameter _id: (path) ID of inbox forwarder 
     - returns: Promise<InboxForwarderDto>
     */
    open class func getInboxForwarder( _id: UUID) -> Promise<InboxForwarderDto> {
        let deferred = Promise<InboxForwarderDto>.pending()
        getInboxForwarderWithRequestBuilder(_id: _id).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an inbox forwarder
     - GET /forwarders/{id}
     - Get inbox forwarder
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox forwarder 
     - returns: RequestBuilder<InboxForwarderDto> 
     */
    open class func getInboxForwarderWithRequestBuilder(_id: UUID) -> RequestBuilder<InboxForwarderDto> {
        var localVariablePath = "/forwarders/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxForwarderDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get an inbox forwarder event
     
     - parameter _id: (path) ID of inbox forwarder 
     - parameter eventId: (path) ID of inbox forwarder event 
     - returns: Promise<InboxForwarderEventDto>
     */
    open class func getInboxForwarderEvent( _id: UUID,  eventId: UUID) -> Promise<InboxForwarderEventDto> {
        let deferred = Promise<InboxForwarderEventDto>.pending()
        getInboxForwarderEventWithRequestBuilder(_id: _id, eventId: eventId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an inbox forwarder event
     - GET /forwarders/{id}/events/{eventId}
     - Get inbox forwarder event
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox forwarder 
     - parameter eventId: (path) ID of inbox forwarder event 
     - returns: RequestBuilder<InboxForwarderEventDto> 
     */
    open class func getInboxForwarderEventWithRequestBuilder(_id: UUID, eventId: UUID) -> RequestBuilder<InboxForwarderEventDto> {
        var localVariablePath = "/forwarders/{id}/events/{eventId}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxForwarderEventDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getInboxForwarderEvents: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get an inbox forwarder event list
     
     - parameter _id: (path) ID of inbox forwarder 
     - parameter page: (query) Optional page index in inbox forwarder event list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox forwarder event list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: Promise<PageInboxForwarderEvents>
     */
    open class func getInboxForwarderEvents( _id: UUID,  page: Int? = nil,  size: Int? = nil,  sort: Sort_getInboxForwarderEvents? = nil) -> Promise<PageInboxForwarderEvents> {
        let deferred = Promise<PageInboxForwarderEvents>.pending()
        getInboxForwarderEventsWithRequestBuilder(_id: _id, page: page, size: size, sort: sort).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an inbox forwarder event list
     - GET /forwarders/{id}/events
     - Get inbox forwarder events
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox forwarder 
     - parameter page: (query) Optional page index in inbox forwarder event list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox forwarder event list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageInboxForwarderEvents> 
     */
    open class func getInboxForwarderEventsWithRequestBuilder(_id: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getInboxForwarderEvents? = nil) -> RequestBuilder<PageInboxForwarderEvents> {
        var localVariablePath = "/forwarders/{id}/events"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageInboxForwarderEvents>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getInboxForwarders: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List inbox forwarders
     
     - parameter inboxId: (query) Optional inbox id to get forwarders from (optional)
     - parameter page: (query) Optional page index in inbox forwarder list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox forwarder list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: Promise<PageInboxForwarderDto>
     */
    open class func getInboxForwarders( inboxId: UUID? = nil,  page: Int? = nil,  size: Int? = nil,  sort: Sort_getInboxForwarders? = nil,  searchFilter: String? = nil,  since: Date? = nil,  before: Date? = nil) -> Promise<PageInboxForwarderDto> {
        let deferred = Promise<PageInboxForwarderDto>.pending()
        getInboxForwardersWithRequestBuilder(inboxId: inboxId, page: page, size: size, sort: sort, searchFilter: searchFilter, since: since, before: before).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List inbox forwarders
     - GET /forwarders
     - List all forwarders attached to an inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox id to get forwarders from (optional)
     - parameter page: (query) Optional page index in inbox forwarder list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox forwarder list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageInboxForwarderDto> 
     */
    open class func getInboxForwardersWithRequestBuilder(inboxId: UUID? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getInboxForwarders? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil) -> RequestBuilder<PageInboxForwarderDto> {
        let localVariablePath = "/forwarders"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "searchFilter": (wrappedValue: searchFilter?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageInboxForwarderDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Test an inbox forwarder
     
     - parameter _id: (path) ID of inbox forwarder 
     - parameter inboxForwarderTestOptions: (body)  
     - returns: Promise<InboxForwarderTestResult>
     */
    open class func testInboxForwarder( _id: UUID,  inboxForwarderTestOptions: InboxForwarderTestOptions) -> Promise<InboxForwarderTestResult> {
        let deferred = Promise<InboxForwarderTestResult>.pending()
        testInboxForwarderWithRequestBuilder(_id: _id, inboxForwarderTestOptions: inboxForwarderTestOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test an inbox forwarder
     - POST /forwarders/{id}/test
     - Test an inbox forwarder
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox forwarder 
     - parameter inboxForwarderTestOptions: (body)  
     - returns: RequestBuilder<InboxForwarderTestResult> 
     */
    open class func testInboxForwarderWithRequestBuilder(_id: UUID, inboxForwarderTestOptions: InboxForwarderTestOptions) -> RequestBuilder<InboxForwarderTestResult> {
        var localVariablePath = "/forwarders/{id}/test"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inboxForwarderTestOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxForwarderTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Test inbox forwarders for inbox
     
     - parameter inboxId: (query) ID of inbox 
     - parameter inboxForwarderTestOptions: (body)  
     - returns: Promise<InboxForwarderTestResult>
     */
    open class func testInboxForwardersForInbox( inboxId: UUID,  inboxForwarderTestOptions: InboxForwarderTestOptions) -> Promise<InboxForwarderTestResult> {
        let deferred = Promise<InboxForwarderTestResult>.pending()
        testInboxForwardersForInboxWithRequestBuilder(inboxId: inboxId, inboxForwarderTestOptions: inboxForwarderTestOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test inbox forwarders for inbox
     - PUT /forwarders
     - Test inbox forwarders for inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) ID of inbox 
     - parameter inboxForwarderTestOptions: (body)  
     - returns: RequestBuilder<InboxForwarderTestResult> 
     */
    open class func testInboxForwardersForInboxWithRequestBuilder(inboxId: UUID, inboxForwarderTestOptions: InboxForwarderTestOptions) -> RequestBuilder<InboxForwarderTestResult> {
        let localVariablePath = "/forwarders"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inboxForwarderTestOptions)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxForwarderTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Test new inbox forwarder
     
     - parameter testNewInboxForwarderOptions: (body)  
     - returns: Promise<InboxForwarderTestResult>
     */
    open class func testNewInboxForwarder( testNewInboxForwarderOptions: TestNewInboxForwarderOptions) -> Promise<InboxForwarderTestResult> {
        let deferred = Promise<InboxForwarderTestResult>.pending()
        testNewInboxForwarderWithRequestBuilder(testNewInboxForwarderOptions: testNewInboxForwarderOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test new inbox forwarder
     - PATCH /forwarders
     - Test new inbox forwarder
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter testNewInboxForwarderOptions: (body)  
     - returns: RequestBuilder<InboxForwarderTestResult> 
     */
    open class func testNewInboxForwarderWithRequestBuilder(testNewInboxForwarderOptions: TestNewInboxForwarderOptions) -> RequestBuilder<InboxForwarderTestResult> {
        let localVariablePath = "/forwarders"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testNewInboxForwarderOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxForwarderTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update an inbox forwarder
     
     - parameter _id: (path) ID of inbox forwarder 
     - parameter createInboxForwarderOptions: (body)  
     - returns: Promise<InboxForwarderDto>
     */
    open class func updateInboxForwarder( _id: UUID,  createInboxForwarderOptions: CreateInboxForwarderOptions) -> Promise<InboxForwarderDto> {
        let deferred = Promise<InboxForwarderDto>.pending()
        updateInboxForwarderWithRequestBuilder(_id: _id, createInboxForwarderOptions: createInboxForwarderOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Update an inbox forwarder
     - PUT /forwarders/{id}
     - Update inbox forwarder
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox forwarder 
     - parameter createInboxForwarderOptions: (body)  
     - returns: RequestBuilder<InboxForwarderDto> 
     */
    open class func updateInboxForwarderWithRequestBuilder(_id: UUID, createInboxForwarderOptions: CreateInboxForwarderOptions) -> RequestBuilder<InboxForwarderDto> {
        var localVariablePath = "/forwarders/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createInboxForwarderOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxForwarderDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
